name: The Juvix compiler CI
'on':
  workflow_dispatch:
    inputs:
      ref:
        description: the repository ref to build
        required: true
        default: main
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.run_id }}'
  cancel-in-progress: true
env:
  STACKFLAGS: '--pedantic --stack-root ${{ github.workspace }}/.stack'

jobs:

  ormolu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: mrkkrp/ormolu-action@v9
        with:
          extra-args: >-
            --ghc-opt -XDerivingStrategies --ghc-opt -XImportQualifiedPost
            --ghc-opt -XMultiParamTypeClasses --ghc-opt -XStandaloneDeriving
            --ghc-opt -XTemplateHaskell --ghc-opt -XUnicodeSyntax
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: jidicula/clang-format-action@v4.10.1
        with:
          clang-format-version: '15'
          check-path: runtime/src
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: trailing-whitespace --all-files
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: end-of-file-fixer --all-files
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: check-yaml --all-files
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: check-added-large-files --all-files
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: check-case-conflict --all-files
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: mixed-line-ending --all-files

  build-and-test-linux:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v3
        with:
          path: main
          submodules: true
      - uses: actions/cache/restore@v3
        id: stack-cache
        name: Restore .stack cache
        with:
          path: ${{ github.workspace }}/.stack
          key: ${{ runner.os }}-stack-

      - uses: actions/cache/restore@v3
        id: stack-work-cache
        name: Restore main/.stack-work cache
        with:
          path: main/.stack-work
          key: ${{ runner.os }}-stack-work-

      - uses: haskell/actions/setup@v2
        name: Setup Haskell
        with:
          ghc-version: 9.2.5
          enable-stack: true
          stack-version: latest

      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: |
            C:/Program Files/LLVM
            ./llvm
          key: '${{ runner.os }}-llvm-13'

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '13.0'
          cached: '${{ steps.cache-llvm.outputs.cache-hit }}'

      - name: Download and extract wasi-sysroot
        run: >
          curl
          https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-15/wasi-sysroot-15.0.tar.gz
          -OL

          tar xfv wasi-sysroot-15.0.tar.gz
      - name: Set WASI_SYSROOT_PATH
        run: |
          echo "WASI_SYSROOT_PATH=$GITHUB_WORKSPACE/wasi-sysroot" >> $GITHUB_ENV

      - name: Install the latest Wasmer version
        uses: jonaprieto/action-install-gh-release@2
        with:
          repo: wasmerio/wasmer
          tag: latest
          binaries-location: bin
          cache: true

      - name: Install libicu for testing
        run: sudo apt install -y libicu66

      - name: Build Project
        run: |
          cd main
          stack path --stack-root
          make build

      - name: Test suite
        id: test
        if: ${{ success() }}
        run: |
          cd main
          make test

      - name: Add ~/.local/bin to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - uses: actions/checkout@v3
        with:
          repository: jonaprieto/smoke
          path: smoke

      - name: Install Smoke
        run: |
          cd smoke
          stack install --stack-root ${{ github.workspace }}/.stack
        shell: bash

      - name: Smoke testing
        id: smoke-linux
        if: ${{ success() }}
        run: |
          cd main
          make smoke

      - name: Save cache .stack
        uses: actions/cache/save@v3
        if: always()
        with:
          path: ${{ github.workspace }}/.stack
          key: '${{ steps.stack-cache.outputs.cache-primary-key }}'

      - name: Save cache main/.stack-work if the job was successful
        uses: actions/cache/save@v3
        with:
          path: main/.stack-work
          key: '${{ steps.stack-work-cache.outputs.cache-primary-key }}'

  docs-linux:
    needs: build-and-test-linux
    if: >-
      github.ref == 'refs/heads/main' || github.event_name ==
      'workflow_dispatch'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v3
        with:
          path: main
          submodules: recursive

      - uses: actions/cache/restore@v3
        name: Restore .stack cache
        id: stack-cache
        with:
          fail-on-cache-miss: true
          path: ${{ github.workspace }}/.stack
          key: ${{ runner.os }}-stack-

      - uses: actions/cache/restore@v3
        name: Restore main/.stack-work cache
        id: stack-work-cache
        with:
          fail-on-cache-miss: true
          path: main/.stack-work
          key: ${{ runner.os }}-stack-work-

      - uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: 2.19.2

      - name: MDBook setup
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 0.4.22

      - uses: haskell/actions/setup@v2
        name: Setup Haskell
        with:
          ghc-version: 9.2.5
          enable-stack: true
          stack-version: latest

      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: |
            C:/Program Files/LLVM
            ./llvm
          key: '${{ runner.os }}-llvm-13'

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '13.0'
          cached: '${{ steps.cache-llvm.outputs.cache-hit }}'

      - name: Generate Markdown files for each Org file
        run: |
          cd main
          make markdown-docs

      - name: Generate HTML and Web App files from milestone examples
        run: |
          cd main
          echo "$GITHUB_WORKSPACE/.local/bin" >> $GITHUB_PATH
          make install
          make html-examples
          make webapp-examples
          make demo-example

      - name: Deploy HTML to github pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          publish_dir: main/_docs
          enable_jekyll: false
          cname: docs.juvix.org

  build-and-test-macos:
    runs-on: macos-12
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v3
        with:
          path: main
          submodules: true

      - uses: actions/cache/restore@v3
        id: stack-cache
        name: Restore .stack cache
        with:
          path: ${{ github.workspace }}/.stack
          key: ${{ runner.os }}-stack-

      - uses: actions/cache/restore@v3
        name: Restore main/.stack-work cache
        id: stack-work-cache
        with:
          path: main/.stack-work
          key: ${{ runner.os }}-stack-work-

      - uses: haskell/actions/setup@v2
        name: Setup Haskell
        with:
          ghc-version: 9.2.5
          enable-stack: true
          stack-version: latest
      - name: Set homebrew LLVM CC and LIBTOOL vars (macOS)
        run: |
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "LIBTOOL=$(brew --prefix llvm)/bin/llvm-ar" >> $GITHUB_ENV
      - name: Install ICU4C
        run: |
          brew install icu4c
          brew link icu4c --force
      - name: Build Project (macOS)
        run: |
          cd main
          stack path --stack-root
          make CC=$CC LIBTOOL=$LIBTOOL build

      - name: Download and extract wasi-sysroot
        run: >
          curl
          https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-15/wasi-sysroot-15.0.tar.gz
          -OL

          tar xfv wasi-sysroot-15.0.tar.gz
      - name: Set WASI_SYSROOT_PATH
        run: |
          echo "WASI_SYSROOT_PATH=$GITHUB_WORKSPACE/wasi-sysroot" >> $GITHUB_ENV
      - name: Install the latest Wasmer version
        uses: jonaprieto/action-install-gh-release@2
        with:
          repo: wasmerio/wasmer
          tag: latest
          binaries-location: bin
          cache: true

      - name: Set homebrew LLVM CC and LIBTOOL vars (macOS)
        run: |
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "LIBTOOL=$(brew --prefix llvm)/bin/llvm-ar" >> $GITHUB_ENV
      - name: stack setup (macOS)
        run: |
          cd main
          stack setup
      - name: Add homebrew clang to the PATH (macOS)
        run: |
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
      - name: Test suite (macOS)
        if: ${{ success() }}
        run: |
          cd main
          make CC=$CC LIBTOOL=$LIBTOOL test

      - name: Save stack cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: ${{ github.workspace }}/.stack
          key: '${{ steps.stack-cache.outputs.cache-primary-key }}'

      - name: Save stack-work cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: main/.stack-work
          key: '${{ steps.stack-work-cache.outputs.cache-primary-key }}'

      - name: Add ~/.local/bin to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Smoke
        uses: jonaprieto/action-install-gh-release@2
        with:
          repo: jonaprieto/smoke
          tag: latest
          extension-matching: disable
          rename-to: smoke
          chmod: 0755

      - name: Smoke testing (macOS)
        id: smoke-macos
        if: ${{ success() }}
        run: |
          cd main
          make CC=$CC LIBTOOL=$LIBTOOL smoke
