-- Juvix runtime for Cairo assembly

-- Make sure Juvix.Compiler.Casm.Extra.Stdlib is kept up to date with
-- this file.

-- Closure layout: [ fuid | 9 - sargs | 9 - argsnum | arguments... ]
--  fuid -- function id which also indicates the relative jump
--          offset for closure call (see juvix_call_closure below)
--  sargs -- number of arguments stored in the closure
--  argsnum -- number of arguments left
-- sargs + argsnum = total numer of arguments for the function
-- Maximum number of function arguments: 8

-- after calling juvix_get_regs:
-- [ap - 4] = fp
-- [ap - 3] = pc
-- [ap - 2] = ap - 2
-- ap offset: 4
juvix_get_regs:
  call juvix_get_ap_reg
  ret
juvix_get_ap_reg:
  ret

-- [fp - 3]: poseidon state ptr
-- [fp - 4]: builtins ptr
-- On return:
-- [ap - 1]: new poseidon state ptr
-- [ap - 2]: new builtins ptr
-- Poseidon ap offset: 13 + 4 + 2
juvix_poseidon:
  -- [fp] = poseidon builtin ptr
  [ap] = [[fp - 4] + 2]; ap++
  -- transfer poseidon state to builtin memory
  [ap] = [[fp - 3] + 1]; ap++
  [ap - 1] = [[fp]]
  [ap] = [[fp - 3] + 2]; ap++
  [ap - 1] = [[fp] + 1]
  [ap] = [[fp - 3] + 3]; ap++
  [ap - 1] = [[fp] + 2]
  call juvix_get_regs
  -- alloc new poseidon state
  [ap] = 1; ap++
  [ap] = [[fp] + 3]; ap++
  [ap] = [[fp] + 4]; ap++
  [ap] = [[fp] + 5]; ap++
  -- alloc new builtins
  [ap] = [[fp - 4]]; ap++
  [ap] = [[fp - 4] + 1]; ap++
  [ap] = [fp] + 6; ap++
  -- new builtins ptr
  [ap] = [ap - 9] + 6; ap++
  -- new poseidon state ptr
  [ap] = [ap - 10] + 2; ap++
  ret

-- [fp - 3]: p : EcPoint ptr
-- [fp - 4]: m : Field
-- [fp - 5]: q : EcPoint ptr
-- [fp - 6]: builtins ptr
-- On return:
-- [ap - 1]: result EcPoint ptr (p + m * q)
-- [ap - 2]: new builtins ptr
-- EcOp ap offset: 13 + 4 + 2
juvix_ec_op:
  -- [fp] = ec_op builtin ptr
  [ap] = [[fp - 6] + 1]; ap++
  -- transfer p to builtin memory
  [ap] = [[fp - 3] + 1]; ap++
  [ap - 1] = [[fp]]
  [ap] = [[fp - 3] + 2]; ap++
  [ap - 1] = [[fp] + 1]
  -- transfer q to builtin memory
  [ap] = [[fp - 5] + 1]; ap++
  [ap - 1] = [[fp] + 2]
  [ap] = [[fp - 5] + 2]; ap++
  [ap - 1] = [[fp] + 3]
  -- transfer m to builtin memory
  [fp - 4] = [[fp] + 4]
  call juvix_get_regs
  -- alloc result EcPoint
  [ap] = 1; ap++
  [ap] = [[fp] + 5]; ap++
  [ap] = [[fp] + 6]; ap++
  -- alloc new builtins
  [ap] = [[fp - 6]]; ap++
  [ap] = [fp] + 7; ap++
  [ap] = [[fp - 6] + 2]; ap++
  -- new builtins ptr
  [ap] = [ap - 8] + 5; ap++
  -- result EcPoint ptr
  [ap] = [ap - 9] + 2; ap++
  ret

-- [fp - 3]: closure
-- [fp - 4]: n = the number of arguments to extend with
-- [fp - 4 - k]: argument n - k - 1 (reverse order!) (k is 0-based)
juvix_extend_closure:
  -- copy stored args reversing them;
  -- to copy the stored args to the new closure
  -- we need to jump forward, so the stored args
  -- need to be available at consecutive memory
  -- addresses backwards
  jmp rel [[fp - 3] + 1]
  [ap] = [[fp - 3] + 10]; ap++
  [ap] = [[fp - 3] + 9]; ap++
  [ap] = [[fp - 3] + 8]; ap++
  [ap] = [[fp - 3] + 7]; ap++
  [ap] = [[fp - 3] + 6]; ap++
  [ap] = [[fp - 3] + 5]; ap++
  [ap] = [[fp - 3] + 4]; ap++
  [ap] = [[fp - 3] + 3]; ap++
  -- the following ensures continuous memory use
  -- with a compile-time constant offset for local
  -- variables
  [ap] = 10; ap++
  [ap] = [[fp - 3] + 1]; ap++
  [ap] = [ap - 2] - [ap - 1]; ap++
  jmp rel [ap - 1]
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  -- now ap = fp + 11
  -- alloc
  call juvix_get_regs
  -- now ap = fp + 15
  -- [fp + 15] = pointer to new closure
  [ap] = [ap - 2] + 8; ap++
  -- [fp + 16] = 9 - sargs
  [ap] = [[fp - 3] + 1]; ap++
  -- [fp + 17] = 9 - argsnum (expected)
  [ap] = [[fp - 3] + 2]; ap++
  -- [fp + 18] = 9
  [ap] = 9; ap++
  -- [fp + 19] = sargs
  [ap] = [fp + 18] - [fp + 16]; ap++
  -- [fp + 20] = 9 - n
  [ap] = [fp + 18] - [fp - 4]; ap++
  -- closure header
  [ap] = [[fp - 3]]; ap++
  [ap] = [fp + 16] - [fp - 4]; ap++
  [ap] = [fp + 17] + [fp - 4]; ap++
  -- copy stored args: jmp rel (9 - sargs)
  jmp rel [fp + 16]
  [ap] = [fp + 7]; ap++
  [ap] = [fp + 6]; ap++
  [ap] = [fp + 5]; ap++
  [ap] = [fp + 4]; ap++
  [ap] = [fp + 3]; ap++
  [ap] = [fp + 2]; ap++
  [ap] = [fp + 1]; ap++
  [ap] = [fp]; ap++
  -- copy extra args: jmp rel (9 - extra args num)
  jmp rel [fp + 20]
  [ap] = [fp - 12]; ap++
  [ap] = [fp - 11]; ap++
  [ap] = [fp - 10]; ap++
  [ap] = [fp - 9]; ap++
  [ap] = [fp - 8]; ap++
  [ap] = [fp - 7]; ap++
  [ap] = [fp - 6]; ap++
  [ap] = [fp - 5]; ap++
  -- return value
  [ap] = [fp + 15]; ap++
  ret

-- [fp - 3]: closure;
-- [fp - 4 - k]: argument k to closure call (0-based)
-- [fp - 4 - n]: builtin pointer, where n = number of supplied args
juvix_call_closure:
  -- jmp rel (9 - argsnum)
  jmp rel [[fp - 3] + 2]
  -- builtin ptr + args
  [ap] = [fp - 12]; ap++
  [ap] = [fp - 11]; ap++
  [ap] = [fp - 10]; ap++
  [ap] = [fp - 9]; ap++
  [ap] = [fp - 8]; ap++
  [ap] = [fp - 7]; ap++
  [ap] = [fp - 6]; ap++
  [ap] = [fp - 5]; ap++
  [ap] = [fp - 4]; ap++
  -- jmp rel (9 - sargs)
  jmp rel [[fp - 3] + 1]
  [ap] = [[fp - 3] + 10]; ap++
  [ap] = [[fp - 3] + 9]; ap++
  [ap] = [[fp - 3] + 8]; ap++
  [ap] = [[fp - 3] + 7]; ap++
  [ap] = [[fp - 3] + 6]; ap++
  [ap] = [[fp - 3] + 5]; ap++
  [ap] = [[fp - 3] + 4]; ap++
  [ap] = [[fp - 3] + 3]; ap++
  jmp rel [[fp - 3]]
-- The above jump needs to be the last instruction in this file.
-- Calls to all possible functions are appended here by the
-- JuvixReg to CASM translation.
