module TypeAlias;

inductive T {
 t : T;
};

inductive T2 {
 t2 : T2;
};

alias : Type;
alias ≔ T;

x : alias;
x ≔ t;

id : Type -> Type;
id x ≔ x;

flip : (Type -> Type -> Type) -> Type -> Type -> Type;
flip f a b ≔ f b a;

inductive Pair (A : Type) (B : Type) {
 mkPair : id T -> id (id A) -> B -> Pair A B;
};

x' : flip Pair (id alias) T2;
x' ≔ mkPair x t2 t;

end;
