module A;

syntax fixity i3 := binary;

module M;
  module N;
    syntax operator T.t i3;

    type T := t : T -> T -> T;

    open T using {t} public;
  end;

  syntax fixity add := binary {assoc := right; above := [i3]};

  syntax operator + add;
  axiom + : Type → Type → Type;
end;

import M;

f : M.N.T -> M.N.T
  | (a M.N.T.t b) := a M.N.T.t b;
