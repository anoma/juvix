module A;

syntax fixity i3 {arity: binary};

module M;
  module N;
    syntax operator t i3;
    type T :=
      | t : T;
  end;

  syntax fixity add {arity: binary, assoc: right, below: [i3]};

  syntax operator + add;
  axiom + : Type → Type → Type;
end;

import M;

f : M.N.T
  | (_ M.N.t _) := Type M.+ Type M.+ M.MType;
