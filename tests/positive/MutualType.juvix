module MutualType;

syntax fixity cons {arity: binary, assoc: right};

syntax operator :: cons;
--- Inductive list.
type List (a : Type) :=
  | --- The empty list
    nil : List a
  | --- An element followed by a list
    :: : a → List a → List a;

Forest : Type -> Type
  
  | A := List (Tree A);

--- N-Ary tree.
type Tree (A : Type) :=
  | node : A -> Forest A -> Tree A;
