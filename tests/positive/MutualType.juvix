module MutualType;

syntax fixity cons := binary {assoc := right};

--- Inductive list.
type List (a : Type) :=
  | --- The empty list
    nil : List a
  | --- An element followed by a list
    :: : a → List a → List a;

open List using {nil; ::} public;

syntax operator :: cons;

Forest : Type -> Type

  | A := List (Tree A);

--- N-Ary tree.
type Tree (A : Type) := node : A -> Forest A -> Tree A;

open Tree using {node} public;
