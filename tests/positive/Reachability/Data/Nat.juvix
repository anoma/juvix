module Data.Nat;

syntax fixity add := binary {assoc := left};
syntax fixity mul := binary {assoc := left; above := [add]};

type ℕ :=
  | zero : ℕ
  | suc : ℕ → ℕ;

open ℕ using {zero; suc} public;

syntax operator + add;

+ : ℕ → ℕ → ℕ
  | zero b := b
  | (suc a) b := suc (a + b);

syntax operator * mul;

* : ℕ → ℕ → ℕ
  | zero b := zero
  | (suc a) b := b + a * b;
