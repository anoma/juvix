module Functor;

trait
type Functor (f : Type -> Type) :=
  mkFunctor {fmap : {A B : Type} -> (A -> B) -> f A -> f B};

type Maybe (a : Type) :=
  | nothing
  | just a;

Maybe-fmap {A B : Type} (f : A -> B) : Maybe A -> Maybe B
  | nothing := nothing
  | (just x) := just (f x);

instance
Maybe-Functor : Functor Maybe := mkFunctor Maybe-fmap;

syntax fixity bind {arity: binary, assoc: left};

trait
type Monad (f : Type -> Type) :=
  mkMonad {
    return : {A : Type} -> A -> f A;
    bind : {A B : Type} -> f A -> (A -> f B) -> f B
  };

syntax operator >>= bind;
>>= : {M : Type -> Type} -> {{Monad M}} -> {A B : Type} -> M A -> (A -> M B) -> M B := Monad.bind;

Maybe-bind {A B : Type}
  : Maybe A -> (A -> Maybe B) -> Maybe B
  | nothing _ := nothing
  | (just a) f := f a;

instance
Maybe-Monad : Monad Maybe :=
  mkMonad (return := just; bind := Maybe-bind);

import Stdlib.Data.Bool open;
import Stdlib.Function open;

b : Maybe Bool :=
  just true >>= (just ∘ not) >>= (just ∘ not) >>= const nothing;
