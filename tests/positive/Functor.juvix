module Functor;

trait
type functor (f : Type -> Type) :=
  mkFunctor {fmap : {A : Type} -> (A -> A) -> f A -> f A};

type maybe (a : Type) :=
  | nothing
  | just a;

maybe-fmap {a : Type} (f : a -> a) : maybe a -> maybe a
  | nothing := nothing
  | (just x) := just (f x);

maybe-functor : functor maybe :=
  mkFunctor {maybe} maybe-fmap;

-- import Stdlib.Data.Bool open;

-- open functor;

-- nn : maybe Bool -> maybe Bool := fmap not;
