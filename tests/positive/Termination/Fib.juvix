module Fib;

syntax fixity add := binary {assoc := left};

type Nat :=
  | zero : Nat
  | suc : Nat → Nat;

open Nat using {zero; suc} public;
open Nat;

syntax operator + add;

+ : Nat → Nat → Nat
  | zero b := b
  | (suc a) b := suc (a + b);

fib : Nat -> Nat
  | zero := zero
  | (suc zero) := suc zero
  | (suc (suc n)) := fib (suc n) + fib n;
