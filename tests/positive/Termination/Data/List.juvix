module Data.List;

import Data.Bool;
open Data.Bool;

import Data.Nat;
open Data.Nat;

type List (A : Type) :=
  nil : List A |
  cons : A → List A → List A;

-- Do not remove implicit arguments. Useful for testing.
foldr : {A : Type} → {B : Type} → (A → B → B) → B → List A → B;
foldr _ z nil := z;
foldr f z (cons h hs) := f h (foldr {_} f z hs);

foldl : {A : Type} → {B : Type} → (B → A → B) → B → List A → B;
foldl f z nil := z ;
foldl {_} {_} f z (cons h hs) := foldl {_} f (f z h) hs;

map : {A : Type} → {B : Type} → (A → B) → List A → List B;
map f nil := nil;
map f (cons h hs) := cons (f h) (map f hs);

filter : {A : Type} → (A → Bool) → List A → List A;
filter f nil := nil;
filter f (cons h hs) := ite (f h)
  (cons h (filter {_} f hs))
  (filter f hs);

length : {A : Type} → List A → ℕ;
length nil := zero;
length {_} (cons _ l) := suc (length l);

rev : {A : Type} → List A → List A → List A;
rev nil l := l;
rev (cons x xs) l := rev xs (cons {_} x l);

reverse : {A : Type} → List A → List A;
reverse l := rev l nil;

replicate : {A : Type} → ℕ → A → List A;
replicate zero _ := nil;
replicate (suc n) x := cons x (replicate n x);

take : {A : Type} → ℕ → List A → List A;
take (suc n) (cons x xs) := cons x (take n xs);
take _ _ := nil;

concat : {A : Type} → List A → List A → List A;
concat nil ys := ys;
concat (cons x xs) ys := cons x (concat xs ys);

end;
