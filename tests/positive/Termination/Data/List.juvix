module Data.List;

import Data.Bool;
open Data.Bool;

import Data.Nat;
open Data.Nat;

type List (A : Type) :=
  | nil : List A
  | cons : A → List A → List A;

open List using {nil; cons} public;

-- Do not remove implicit arguments. Useful for testing.
foldr : {A : Type} → {B : Type} → (A → B → B) → B → List A → B
  | _ z nil := z
  | f z (cons h hs) := f h (foldr {_} f z hs);

foldl : {A : Type} → {B : Type} → (B → A → B) → B → List A → B
  | f z nil := z
  | {_} {_} f z (cons h hs) := foldl {_} f (f z h) hs;

map : {A : Type} → {B : Type} → (A → B) → List A → List B
  | f nil := nil
  | f (cons h hs) := cons (f h) (map f hs);

filter : {A : Type} → (A → Bool) → List A → List A
  | f nil := nil
  | f (cons h hs) := ite (f h) (cons h (filter {_} f hs)) (filter f hs);

length : {A : Type} → List A → ℕ
  | nil := zero
  | {_} (cons _ l) := suc (length l);

rev : {A : Type} → List A → List A → List A
  | nil l := l
  | (cons x xs) l := rev xs (cons {_} x l);

reverse : {A : Type} → List A → List A
  | l := rev l nil;

replicate : {A : Type} → ℕ → A → List A
  | zero _ := nil
  | (suc n) x := cons x (replicate n x);

take : {A : Type} → ℕ → List A → List A
  | (suc n) (cons x xs) := cons x (take n xs)
  | _ _ := nil;

concat : {A : Type} → List A → List A → List A
  | nil ys := ys
  | (cons x xs) ys := cons x (concat xs ys);
