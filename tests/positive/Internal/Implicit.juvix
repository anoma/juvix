module Implicit;

import Stdlib.Data.Fixity open;

syntax operator << composition;

<< : {A : Type} → {B : Type} → {C : Type} → (B → C) → (A → B) → A → C
  | f g x := f (g x);

type Nat :=
  | zero : Nat
  | suc : Nat → Nat;

open Nat using {zero; suc} public;

syntax operator × functor;
type × (A : Type) (B : Type) := , : A → B → A × B;

open × using {,} public;

syntax operator , pair;

uncurry : {A : Type} → {B : Type} → {C : Type} → (A → B → C) → A × B → C
  | f (a, b) := f a b;

fst : {A : Type} → {B : Type} → A × B → A
  | (a, _) := a;

snd : {A : Type} → {B : Type} → A × B → B
  | (_, b) := b;

swap : {A : Type} → {B : Type} → A × B → B × A
  | (a, b) := b, a;

first : {A : Type} → {B : Type} → {A' : Type} → (A → A') → A × B → A' × B
  | f (a, b) := f a, b;

second : {A : Type} → {B : Type} → {B' : Type} → (B → B') → A × B → A × B'
  | f (a, b) := a, f b;

both : {A : Type} → {B : Type} → (A → B) → A × A → B × B
  | f (a, b) := f a, f b;

type Bool :=
  | true : Bool
  | false : Bool;

open Bool using {true; false} public;

ite : {A : Type} → Bool → A → A → A
  | true a _ := a
  | false _ b := b;

type List (A : Type) :=
  | nil : List A
  | :: : A → List A → List A;

open List using {nil; ::} public;

syntax operator :: cons;

upToTwo : _ := zero :: suc zero :: suc (suc zero) :: nil;

p1 : Nat → Nat → Nat × Nat
  | a b := a, b;

type Proxy (A : Type) := proxy : Proxy A;

open Proxy using {proxy} public;

t2' : {A : Type} → Proxy A := proxy;

t2 : {A : Type} → Proxy A := proxy;

t3 : ({A : Type} → Proxy A) → {B : Type} → Proxy B → Proxy B
  | _ _ := proxy;

t4 : {B : Type} → Proxy B
  | {_} := t3 proxy proxy;

t4' : {B : Type} → Proxy B := t3 proxy proxy;

map : {A : Type} → {B : Type} → (A → B) → List A → List B
  | f nil := nil
  | f (x :: xs) := f x :: map f xs;

t : {A : Type} → Proxy A
  | {_} := proxy;

t' : {A : Type} → Proxy A := proxy;

t5 : {A : Type} → Proxy A → Proxy A
  | p := p;

t5' : {A : Type} → Proxy A → Proxy A
  | proxy := proxy;

f : {A : Type} → {B : Type} → A → B → _
  | a b := a;

pairEval : {A : Type} → {B : Type} → (A → B) × A → B
  | (f, x) := f x;

pairEval' : {A : Type} → {B : Type} → ({C : Type} → A → B) × A → B
  | (f, x) := f {Nat} x;

foldr : {A : Type} → {B : Type} → (A → B → B) → B → List A → B
  | _ z nil := z
  | f z (h :: hs) := f h (foldr f z hs);

foldl : {A : Type} → {B : Type} → (B → A → B) → B → List A → B
  | f z nil := z
  | f z (h :: hs) := foldl f (f z h) hs;

filter : {A : Type} → (A → Bool) → List A → List A
  | _ nil := nil
  | f (h :: hs) := ite (f h) (h :: filter f hs) (filter f hs);

partition : {A : Type} → (A → Bool) → List A → List A × List A
  | _ nil := nil, nil
  | f (x :: xs) := ite (f x) first second ((::) x) (partition f xs);
