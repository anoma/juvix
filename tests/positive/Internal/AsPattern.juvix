module AsPattern;

syntax infixr 9 ∘;
∘ :
  {A : Type}
    → {B : Type}
    → {C : Type}
    → (B → C)
    → (A → B)
    → A
    → C;
∘ {_} {B} {_} f g x := f (g x);

builtin nat
type Nat :=
  | zero : Nat
  | suc : Nat → Nat;

syntax infixl 6 +;
builtin nat-plus
+ : Nat → Nat → Nat;
+ zero b := b;
+ (suc a) b := suc (a + b);

syntax infixr 2 ×;
syntax infixr 4 ,;
type × (A : Type) (B : Type) :=
  | , : A → B → A × B;

fst : {A : Type} → {B : Type} → A × B → A;
fst p@(a, _) := a;

snd : {A : Type} → {B : Type} → A × B → B;
snd p@(_, b) := b;

lambda : Nat → Nat → Nat;
lambda x := λ {a@(suc _) := a + x + zero};

a : {A : Type} → A × Nat → Nat;
a p@(x, s@zero) := snd p + 1;

b : {A : Type} → A × Nat → ({B : Type} → B → B) → A;
b p@(_, zero) f := (f ∘ fst) p;
