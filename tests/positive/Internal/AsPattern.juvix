module AsPattern;

import Stdlib.Data.Fixity open;

syntax operator << composition;

<< : {A : Type} → {B : Type} → {C : Type} → (B → C) → (A → B) → A → C
  | {_} {B} {_} f g x := f (g x);

builtin nat
type Nat :=
  | zero : Nat
  | suc : Nat → Nat;

open Nat using {zero; suc} public;

syntax operator + additive;

builtin nat-plus
+ : Nat → Nat → Nat
  | zero b := b
  | (suc a) b := suc (a + b);

syntax operator × functor;
type × (A : Type) (B : Type) := , : A → B → A × B;

open × using {,} public;

syntax operator , pair;

fst : {A : Type} → {B : Type} → A × B → A
  | p@(a, _) := a;

snd : {A : Type} → {B : Type} → A × B → B
  | p@(_, b) := b;

lambda : Nat → Nat → Nat
  | x :=
    λ{
      | a@(suc _) := a + x + zero
      | zero := zero
    };

a : {A : Type} → A × Nat → Nat
  | {A'@_} p@(x, s@zero) := snd p + suc zero
  | p@(x, s@_) := snd p + suc zero;

b : {A : Type} → A × Nat → ({B : Type} → B → B) → A
  | p@(_, zero) f := (f << fst) p
  | p@(_, _) f := (f << fst) p;
