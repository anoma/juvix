module Synonyms;

import Stdlib.Prelude open;

Ty1 : Type := Bool → Bool;

idTy (A : Type) : Type := A;

typeToType : Type := Type -> Type;

idTy2 : typeToType
  | A := A;

Ty2 : idTy Type := Ty1;

k : Ty2
  | x := x;

Num : Type := {A : Type} → (A → A) → A → A;

-- we need the explicit `{_}` since we do not normalize types in the arity checker
czero : Num
  | {_} f x := x;

csuc : idTy2 Num → idTy Num
  | n {_} f := f << n {_} f;
