module Synonyms;

import Stdlib.Prelude open;

Ty1 : Type := Bool → Bool;

Ty2 : Type := Ty1;

k : Ty2
  | x := x;

Num : Type := {A : Type} → (A → A) → A → A;

-- we need the explicit `{_}` since we do not normalize types in the arity checker
czero : Num
  | {_} f x := x;

csuc : Num → Num
  | n {_} f := f ∘ n {_} f;
