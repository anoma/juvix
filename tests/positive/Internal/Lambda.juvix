module Lambda;

inductive Nat {
  zero : Nat;
  suc : Nat → Nat;
};

infixr 2 ×;
infixr 4 ,;
inductive × (A : Type) (B : Type) {
  , : A → B → A × B;
};

infixr 9 ∘;
∘ : {A : Type} → {B : Type} → {C : Type} → (B → C) → (A → B) → A → C;
∘ {_} {B} {_} := λ {f g x := f (g x)};

id : {A : Type} → A → A;
id := λ {a := a};

id2 : {A : Type} → {B : Type} → A → A;
id2 := λ {a := a};

id' : (A : Type) → A → A;
id' := λ {A a := a};

id'' : (A : Type) → A → A;
id'' := λ {A := λ {a := a}};

uncurry : {A : Type} → {B : Type} → {C : Type} → (A → B → C) → A × B → C;
uncurry := λ {f (a, b) := f a b};

idB : {A : Type} → A → A;
idB a ≔ λ { a := a} a;

mapB : {A : Type} → (A → A) → A → A;
mapB ≔ λ { f a := f a};

terminating add : Nat → Nat → Nat;
add := λ {zero n := n; (suc n) := λ {m := suc (add n m) }};

fst : {A : Type} → {B : Type} → A × B → A;
fst {_} := λ {(a, _) := a};

swap : {A : Type} → {B : Type} → A × B → B × A;
swap {_} {_} := λ {(a, b) := b, a};

first : {A : Type} → {B : Type} → {A' : Type} → (A → A') → A × B → A' × B;
first := λ {f (a, b) := f a, b};

second : {A : Type} → {B : Type} → {B' : Type} → (B → B') → A × B → A × B';
second f (a , b) := a , f b;

both : {A : Type} → {B : Type} → (A → B) → A × A → B × B;
both {_} {B} := λ {f (a, b) := f a, f b};

infixr 5 ::;
inductive List (a : Type) {
  nil : List a;
  :: : a → List a → List a;
};

terminating
map : {A : Type} → {B : Type} → (A → B) → List A → List B;
map {_} := λ {f nil := nil;
              f (x :: xs) := f x :: map f xs};

pairEval : {A : Type} → {B : Type} → (A → B) × A → B;
pairEval := λ {(f, x) := f x};

terminating
foldr : {A : Type} → {B : Type} → (A → B → B) → B → List A → B;
foldr := λ {_ z nil := z;
            f z (h :: hs) := f h (foldr f z hs)};

terminating
foldl : {A : Type} → {B : Type} → (B → A → B) → B → List A → B;
foldl := λ {f z nil := z;
            f z (h :: hs) := foldl f (f z h) hs};

inductive Bool {
  true : Bool;
  false : Bool;
};

if : {A : Type} → Bool → A → A → A;
if := λ {true a _ := a;
         false _ b := b};

terminating
filter : {A : Type} → (A → Bool) → List A → List A;
filter := λ {_ nil := nil;
             f (h :: hs) := if (f h)
                            (h :: filter f hs)
                            (filter f hs)};

terminating
partition : {A : Type} → (A → Bool) → List A → List A × List A;
partition := λ {_ nil := nil, nil;
                f (x :: xs) := (if (f x) first second) ((::) x) (partition f xs)};

terminating
zipWith : {A : Type} → {B : Type} → {C : Type} → (_ → _ → _) → List A → List B → List C;
zipWith := λ {_ nil _ := nil;
              _ _ nil := nil;
              f (x :: xs) (y :: ys) := f x y :: zipWith f xs ys
             };

t : {A : Type} → {B : Type} → ({X : Type} → List X) → List A × List B;
t := id {({X : Type} → List X) → _} λ { f := f {_} , f {_} };

end;
