module Simple;

type T :=
  | tt : T;

someT : T := tt;

type Bool :=
  | false : Bool
  | true : Bool;

type Nat :=
  | zero : Nat
  | suc : Nat → Nat;

syntax infix 3 ==;

== : Nat → Nat → Bool
  | zero zero := true
  | (suc a) (suc b) := a == b
  | _ _ := false;

syntax infixl 4 +;

+ : Nat → Nat → Nat
  | zero b := b
  | (suc a) b := suc (a + b);

syntax infixr 5 ::;
type List :=
  | nil : List
  | :: : Nat → List → List;

foldr : (Nat → Nat → Nat) → Nat → List → Nat
  | _ v nil := v
  | f v (a :: as) := f a (foldr f v as);

sum : List → Nat := foldr (+) zero;
