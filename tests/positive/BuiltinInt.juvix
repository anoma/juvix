module BuiltinInt;

open import Stdlib.Data.Nat;
open import Stdlib.Data.Nat.Ord;
open import Stdlib.Data.Bool;

builtin int type Int :=
  | --- ofNat n represents the integer n
    ofNat : Nat -> Int
  | --- negSuc n represents the integer -(n + 1)
    negSuc : Nat -> Int;

subNatInt : Nat -> Nat -> Int;
subNatInt m n :=
  case sub n m
    | zero := ofNat (sub m n)
    | suc k := negSuc k;

negNat : Nat -> Int;
negNat zero := ofNat zero;
negNat (suc n) := negSuc n;

neg : Int -> Int;
neg (ofNat n) := negNat n;
neg (negSuc n) := ofNat (suc n);

addInt : Int -> Int -> Int;
addInt (ofNat m) (ofNat n) := ofNat (m + n);
addInt (ofNat m) (negSuc n) := subNatInt m (suc n);
addInt (negSuc m) (ofNat n) := subNatInt n (suc m);
addInt (negSuc m) (negSuc n) := negSuc (suc (m + n));

mulInt : Int -> Int -> Int;
mulInt (ofNat m) (ofNat n) := ofNat (m * n);
mulInt (ofNat m) (negSuc n) := negNat (m * suc n);
mulInt (negSuc m) (ofNat n) := negNat (suc m * n);
mulInt (negSuc m) (negSuc n) := ofNat (suc m * suc n);

subInt : Int -> Int -> Int;
subInt m n := addInt m (neg n);

toNat : Int -> Nat;
toNat (ofNat n) := n;
toNat (negSuc _) := zero;

eqInt : Int -> Int -> Bool;
eqInt (ofNat m) (ofNat n) := m == n;
eqInt (negSuc m) (negSuc n) := m == n;
eqInt _ _ := false;

neqInt : Int -> Int -> Bool;
neqInt m n := not (eqInt m n);

nonNeg : Int -> Bool;
nonNeg (ofNat n) := true;
nonNeg (negSuc _) := false;

leInt : Int -> Int -> Bool;
leInt m n := nonNeg (subInt n m);

ltInt : Int -> Int -> Bool;
ltInt m n := leInt (addInt m (ofNat 1)) n;

geInt : Int -> Int -> Bool;
geInt m n := leInt m n;

gtInt : Int -> Int -> Bool;
gtInt m n := ltInt n m;

divInt : Int -> Int -> Int;
divInt (ofNat m) (ofNat n) := ofNat (div m n);
divInt (ofNat m) (negSuc n) := neg (ofNat (div m (suc n)));
divInt (negSuc m) (ofNat n) := neg (ofNat (div (suc m) n));
divInt (negSuc m) (negSuc n) := ofNat (div (suc m) (suc n));

modInt : Int -> Int -> Int;
modInt (ofNat m) (ofNat n) := ofNat (mod m n);
modInt (ofNat m) (negSuc n) := ofNat (mod m (suc n));
modInt (negSuc m) (ofNat n) := neg (ofNat (mod (suc m) n));
modInt (negSuc m) (negSuc n) := neg (ofNat (mod (suc m) (suc n)));
