module Input;

builtin bool
type Bool :=
     true : Bool
  | false : Bool;

builtin bool-if
if : {A : Type} → Bool → A → A → A;
if true t _ := t;
if false _ e := e;

builtin nat
type ℕ :=
 zero : ℕ |
 suc : ℕ → ℕ;

boolToNat : Bool → ℕ;
boolToNat false := zero;
boolToNat true := suc zero;

infixl 4 +;
builtin nat-plus
+ : ℕ → ℕ → ℕ;
+ zero x := x;
+ (suc a) b := suc (a + b);

mult : ℕ → ℕ → ℕ;
mult zero _ := zero;
mult (suc n) m := m + (mult n m);

plusOne : ℕ → ℕ;
plusOne := suc;

someLiteral : _;
someLiteral := 123;

infix 4 ==;
== : ℕ → ℕ → Bool;
== zero zero := true;
== (suc n) (suc m) := n == m;
== _ _ := false;

builtin IO axiom IO : Type;
builtin string axiom String : Type;

infixl 1 >>;
builtin IO-sequence axiom >> : IO → IO → IO;
builtin nat-print axiom printNat : ℕ → IO;
builtin string-print axiom printString : String → IO;

printNatLn : ℕ -> IO;
printNatLn n := printNat n >> printString "\n";

main : IO;
main := printNatLn (boolToNat true)
     >> printNatLn (boolToNat false)
     >> printNatLn (mult 3 (2 + 2))
     >> printNatLn 2
     >> printNatLn (if (1 == 2) 100 200)
     >> printNatLn (if (1 == 1) 300 400)
     >> if (1 == 2) (printNatLn 500) (printNatLn 600)
     >> if (1 == 1) (printNatLn 700) (printNatLn 800);

end;
