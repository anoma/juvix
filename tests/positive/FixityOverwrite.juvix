module FixityOverwrite;

import Stdlib.Data.Fixity as F;

type T : Type := t;

open T using {t} public;
open T;

module P;
  open Pair public;

  syntax operator , F.pair;
  type Pair := , T T;

  open Pair using {,} public;

  p1 : Pair := t, t;
end;

syntax operator P., F.none;

p2 : P.Pair := P., t t;

module Next;
  -- inherited fixity from parent
  p3 : P.Pair := P., t t;

  open P;

  p4 : P.Pair := , t t;
end;

module After;
  type Pair := , T T;

  open Pair using {,} public;
  open Pair;

  -- An operator definition takes effect only on statements that come after it
  p1 : Pair := , t t;

  syntax operator , F.pair;

  p2 : Pair := t, t;
end;

module Other;
  type Pair := , T T;

  open Pair using {,} public;
  open Pair;

  syntax operator , F.pair;
  syntax alias ! := ,;

  -- An alias inherits the fixity of the referenced symbol
  p1 : Pair := t ! t;

  p2 : Pair := t, t;

  -- When we change the fixity of the referenced symbol, the fixity of the alias
  -- does not change.
  syntax operator , F.none;

  p1' : Pair := t ! t;

  p2' : Pair := , t t;

  -- We can overwrite the alias fixity
  syntax operator ! F.none;

  p1'' : Pair := ! t t;
end;
