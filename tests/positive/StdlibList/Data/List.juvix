module Data.List;

import Data.Bool;
open Data.Bool;

type List (A : Type) :=
  | nil : List A
  | :: : A → List A → List A;

open List using {nil; ::} public;

open List public;

match : {A : Type} → {B : Type} → A → (A → B) → B
  | x f := f x;

foldr : (a : Type) → (b : Type) → (a → b → b) → b → List a → b
  | _ _ _ z nil := z
  | a b f z (:: h hs) := f h (foldr a b f z hs);

foldl : (a : Type) → (b : Type) → (b → a → b) → b → List a → b
  | a b f z nil := z
  | a b f z (:: h hs) := foldl a b f (f z h) hs;

map : (a : Type) → (b : Type) → (a → b) → List a → List b
  | _ b f nil := nil
  | a b f (:: h hs) := :: (f h) (map a b f hs);

filter : (a : Type) → (a → Bool) → List a → List a
  | a f nil := nil
  | a f (:: h hs) :=
    match
      (f h)
      λ{
        | true := :: h (filter a f hs)
        | false := filter a f hs
      };

import Data.Nat;
open Data.Nat;

length : (a : Type) → List a → ℕ
  | _ nil := zero
  | a (:: _ l) := suc (length a l);

reverse : (a : Type) → List a → List a
  | a l :=
    let
      rev : List a → List a → List a
        | nil a := a
        | (:: x xs) a := rev xs (:: x a);
    in rev l nil;

replicate : (a : Type) → ℕ → a → List a
  | a zero _ := nil
  | a (suc n) x := :: x (replicate a n x);

take : (a : Type) → ℕ → List a → List a
  | a (suc n) (:: x xs) := :: x (take a n xs)
  | a _ _ := nil;

import Data.Ord;
open Data.Ord;

import Data.Product;
open Data.Product;

splitAt : (a : Type) → ℕ → List a → List a × List a
  | a _ nil := , nil nil
  | a zero xs := , nil xs
  | a (suc zero) (:: x xs) := , (:: x nil) xs
  | a (suc (suc m)) (:: x xs) :=
    match (splitAt a m xs) λ{(, xs' xs'') := , (:: x xs') xs''};

terminating
merge : (a : Type) → (a → a → Ordering) → List a → List a → List a
  | a cmp (:: x xs) (:: y ys) :=
    match
      (cmp x y)
      λ{
        | LT := :: x (merge a cmp xs (:: y ys))
        | _ := :: y (merge a cmp (:: x xs) ys)
      }
  | _ _ nil ys := ys
  | _ _ xs nil := xs;

++ : (a : Type) → List a → List a → List a
  | a nil ys := ys
  | a (:: x xs) ys := :: x (++ a xs ys);

terminating
quickSort : (a : Type) → (a → a → Ordering) → List a → List a
  | a _ nil := nil
  | a _ (:: x nil) := :: x nil
  | a cmp (:: x ys) :=
    let
      ltx (y : a) : Bool :=
        match
          (cmp y x)
          λ{
            | LT := true
            | _ := false
          };
      gex (y : a) : Bool := not (ltx y);
    in ++
      a
      (quickSort a cmp (filter a ltx ys))
      (++ a (:: x nil) (quickSort a cmp (filter a gex ys)));
