-- inductive types
module test003;

open import Stdlib.Prelude;
open import Stdlib.Data.Nat.Ord;

type enum :=
|  opt0 : enum
|  opt1 : Bool -> enum
|  opt2 : Bool -> Bool -> enum;

natToBool : Nat -> Bool;
natToBool x := if (x == 0) false true;

boolToNat : Bool -> Nat;
boolToNat x := if x 1 0;

main : Nat -> Nat -> Nat;
main x y := boolToNat $ Î»{
|  opt0 := false
|  (opt1 b) := b
|  (opt2 b c) := if b b c
} (opt2 (natToBool x) (natToBool y));
