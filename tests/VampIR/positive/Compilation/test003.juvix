-- inductive types
module test003;

import Stdlib.Prelude open;

type enum :=
  | opt0 : enum
  | opt1 : Bool -> enum
  | opt2 : Bool -> Bool -> enum;

natToBool : Nat -> Bool
  | x := ite (x == 0) false true;

boolToNat : Bool -> Nat
  | x := ite x 1 0;

main : Nat -> Nat -> Nat
  | x y :=
    boolToNat
      <| Î» {
          | opt0 := false
          | (opt1 b) := b
          | (opt2 b c) := ite b b c
        }
        (opt2 (natToBool x) (natToBool y));
