-- higher-order inductive types
module test006;

import Stdlib.Prelude open;

type enum :=
  | opt0 : enum
  | opt1 : Bool -> enum
  | opt2 : Bool -> (Bool -> Bool) -> enum
  | opt3 : Bool -> (Bool -> Bool -> Bool) -> Bool -> enum;

natToBool : Nat -> Bool
  | x := ite (x == 0) false true;

boolToNat : Bool -> Nat
  | x := ite x 1 0;

main : Nat -> Nat -> Nat
  | x y :=
    boolToNat
      <| case
          opt3 (natToBool x) Î» {x y := ite y false x} (natToBool y)
        of {
          | opt0 := false
          | opt1 b := b
          | opt2 b f := f b
          | opt3 b1 f b2 := f b1 b2
        };
