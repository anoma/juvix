-- applications with lets and cases in function position
module test009;

import Stdlib.Prelude open;

f : Nat -> ((Nat -> Nat) -> Nat -> Nat) × Nat → Nat
  | a l :=
    case l of {
      | x, zero := x
      | _ := id
    }
      (let
        y : Nat → Nat := id;
      in (let
           z : (Nat → Nat) → Nat → Nat := id;
         in case l of {
              | _, zero := id
              | _ := id
            }
           z)
        y)
      a;

main : Nat -> Nat -> Nat -> Nat
  | a b c := f a (λ {| x y := x y + b}, c);
