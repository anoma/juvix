-- fast exponentiation (exponential unrolling blow-up)
module test021;

import Stdlib.Prelude open;
import Stdlib.Data.Nat.Ord open;

power : Nat → Nat → Nat :=
  let
    {-# unroll: 4 #-}
    terminating
    power' (acc a b : Nat) : Nat :=
      if
        (b == 0)
        acc
        (if
          (mod b 2 == 0)
          (power' acc (a * a) (div b 2))
          (power' (acc * a) (a * a) (div b 2)));
  in power' 1;

main : Nat -> Nat -> Nat := power;
