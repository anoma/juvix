-- polymorphism

type list : Π A : Type, Type {
  cons : Π A : Type, A → list A → list A;
  nil : Π A : Type, list A;
};

def id : Π A : Type, A → A := λ(A : Type) λ(x : A) x;

def hd : Π A : Type, list A → A := λ(A : Type) λl case l of { cons _ x _ := x };

def tl : Π A : Type, list A → list A := λ(A : Type) λl case l of { cons _ _ y := y };

\(x : Int) \(y : Int)
hd Int (tl Int (id (list Int) (cons Int x (cons Int y (nil Int)))))
