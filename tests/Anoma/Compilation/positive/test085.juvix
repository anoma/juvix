module test085;

import Stdlib.Prelude open;
import Stdlib.Debug.Trace open;

-- This definition does not match the spec. For testing purposes only
builtin anoma-resource
type Resource :=
  mkResource@{
    label : Nat;
    logic : Nat;
    ephemeral : Bool;
    quantity : Nat;
    data : Pair Nat Nat;
    nullifier-key : Nat;
    nonce : Nat;
    rseed : Nat
  };

mkResource' (label logic : Nat) {quantity : Nat := 0} : Resource :=
  mkResource@{
    label;
    logic;
    ephemeral := false;
    quantity;
    data := 0, 0;
    nullifier-key := 0;
    nonce := 0;
    rseed := 0
  };

-- This definition does not match the spec. For testing purposes only
builtin anoma-action
type Action := mkAction Nat;

builtin anoma-delta
axiom Delta : Type;

builtin anoma-kind
axiom Kind : Type;

builtin anoma-resource-commitment
axiom commitment : Resource -> Nat;

builtin anoma-resource-nullifier
axiom nullifier : Resource -> Nat;

builtin anoma-resource-kind
axiom kind : Resource -> Kind;

builtin anoma-resource-delta
axiom resourceDelta : Resource -> Delta;

builtin anoma-action-delta
axiom actionDelta : Action -> Delta;

builtin anoma-actions-delta
axiom actionsDelta : List Action -> Delta;

builtin anoma-prove-action
axiom proveAction : Action -> Nat;

builtin anoma-prove-delta
axiom proveDelta : Delta -> Nat;

builtin anoma-zero-delta
axiom zeroDelta : Delta;

builtin anoma-add-delta
axiom addDelta : Delta -> Delta -> Delta;

builtin anoma-sub-delta
axiom subDelta : Delta -> Delta -> Delta;

main : Delta :=
  trace
      (resourceDelta
        mkResource'@{
          label := 11;
          logic := 22;
          quantity := 55
        })
    >-> trace (commitment (mkResource' 0 0))
    >-> trace (nullifier (mkResource' 0 0))
    >-> trace (actionDelta (mkAction 0))
    >-> trace (actionsDelta [mkAction 0])
    >-> trace (addDelta zeroDelta zeroDelta)
    >-> trace (subDelta zeroDelta zeroDelta)
    >-> trace (kind (mkResource' 10 11))
    >-> trace (proveAction (mkAction 0))
    >-> trace (proveDelta zeroDelta)
    >-> zeroDelta;
