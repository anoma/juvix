-- pattern matching and lambda-case
module test007;

import Stdlib.Prelude open;
import Stdlib.Debug open;

map' {A B} (f : A → B) : List A → List B :=
  \ {
    | nil := nil
    | (h :: t) := f h :: map' f t
  };

terminating
map'' {A B} (f : A → B) (x : List A) : List B :=
  if (null x) nil (f (head (failwith "head: empty list") x) :: map'' f (tail x));

lst : List Nat := 0 :: 1 :: nil;

main : List Nat :=
  trace (null lst)
    >>> trace (null (nil {Nat}))
    >>> trace (head 1 lst)
    >>> trace (tail lst)
    >>> trace (head 0 (tail lst))
    >>> trace (map ((+) 1) lst)
    >>> trace (map' ((+) 1) lst)
    >>> map'' ((+) 1) lst;
