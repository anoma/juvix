-- pattern matching and lambda-case
module test007;

import Stdlib.Prelude open;
import Stdlib.Debug open;

map' {A B} (f : A → B) : List A → List B :=
  \{
    | nil := nil
    | (h :: t) := f h :: map' f t
  };

-- TODO: Restore when anoma backend supports strings
-- terminating
-- map'' {A B} {{Partial}} (f : A → B) (x : List A) : List B :=
--   if (isEmpty x) nil (f (phead x) :: map'' f (tail x));

lst : List Nat := 0 :: 1 :: nil;

main : List Nat :=
  trace (isEmpty lst)
    >-> trace (isEmpty (nil {Nat}))
    >-> trace (head 1 lst)
    >-> trace (tail lst)
    >-> trace (head 0 (tail lst))
    >-> trace (map ((+) 1) lst)
    >-> map' ((+) 1) lst;
-- TODO: Restore when anoma backend supports strings
-- >-> runPartial λ {{{_}} := map'' ((+) 1) lst};
