-- recursive let
module test034;

import Stdlib.Prelude open;
import Stdlib.Debug.Trace open;

sum : Nat → Nat :=
  let
    sum' : Nat → Nat
      | zero := zero
      | (suc n) := suc n + sum' n;
  in sum';

mutrec : Nat :=
  let
    terminating
    f (x : Nat) : Nat := ite (x < 1) 1 (g (sub x 1) + 2 * x);
    terminating
    g (x : Nat) : Nat := ite (x < 1) 1 (x + h (sub x 1));
    terminating
    h (x : Nat) : Nat := ite (x < 1) 1 (x * f (sub x 1));
  in trace (f 5) >-> trace (f 10) >-> trace (g 5) >-> h 5;

main : Nat := trace (sum 1000) >-> mutrec;
