-- record updates and record patterns
module test060;

import Stdlib.Prelude open hiding {fst};

type Triple (A B C : Type) :=
  mkTriple@{
    fst : A;
    snd : B;
    thd : C;
  };

open Triple using {mkTriple} public;

type Pair' (A B : Type) :=
  mkPair@{
    fst : A;
    snd : B;
  };

open Pair' using {mkPair} public;

mf : Pair' (Pair' Bool (List Nat)) (List Nat) â†’ Bool
  | mkPair@{fst := mkPair@{fst; snd := nil}; snd := zero :: _} := fst
  | x := case x of _ := false;

main : Triple Nat Nat Nat :=
  let
    p : Triple Nat Nat Nat := mkTriple 2 2 2;
    p' : Triple Nat Nat Nat :=
      p@Triple{
        fst := Triple.fst p + 1;
        snd := Triple.snd p * 3 + Triple.thd p + Triple.fst p;
      };
    f : Triple Nat Nat Nat -> Triple Nat Nat Nat :=
      \{p := p@Triple{fst := Triple.fst p * 10}};
  in ite
    (mf
      mkPair@{
        fst := mkPair true nil;
        snd := 0 :: nil;
      })
    (f p')
    mkTriple@{
      fst := 0;
      thd := 0;
      snd := 0;
    };
