-- functional queues
module test026;

import Stdlib.Prelude open;

type Queue (A : Type) := queue : List A → List A → Queue A;

open Queue using {queue} public;

qfst : {A : Type} → Queue A → List A
  | (queue x _) := x;

qsnd : {A : Type} → Queue A → List A
  | (queue _ x) := x;

last {A} : List A -> Maybe A
  | nil := nothing
  | [x] := just x
  | (_ :: t) := last t;

front : {A : Type} → Queue A → Maybe A
  | q :=
    case qfst q of
      | nil := last (qsnd q)
      | x :: _ := just x;

drop_front : {A : Type} → Queue A → Queue A
  | {A} q :=
    let
      q' : Queue A := queue (tail (qfst q)) (qsnd q);
    in case qfst q' of
         | nil := queue (reverse (qsnd q')) nil
         | _ := q';

pop_front {A} : Queue A -> Maybe (Pair A (Queue A))
  | (queue xs ys) :=
    case xs of
      | h :: t := just (h, queue t ys)
      | [] :=
        case reverse ys of
          | h :: t := just (h, queue t [])
          | [] := nothing;

push_back : {A : Type} → Queue A → A → Queue A
  | q x :=
    case qfst q of
      | nil := queue (x :: nil) (qsnd q)
      | q' := queue q' (x :: qsnd q);

is_empty : {A : Type} → Queue A → Bool
  | q :=
    case qfst q of
      | nil :=
        case qsnd q of {
          | nil := true
          | _ := false
        }
      | _ := false;

empty : {A : Type} → Queue A := queue nil nil;

terminating
g : List Nat → Queue Nat → List Nat
  | acc q :=
    case pop_front q of
      | nothing := acc
      | just (h, q') := g (h :: acc) q';

f : Nat → Queue Nat → List Nat
  | zero q := g nil q
  | n@(suc n') q := f n' (push_back q n);

main : List Nat := f 100 empty;
-- list of numbers from 1 to 100
