module delta;

import Stdlib.Prelude open;
import Stdlib.Debug.Trace open;
import ResourceMachine open;

main : Delta :=
  let
    resource : Resource :=
      mkResource@{
        label := 11;
        logic := \{_ _ := true};
        ephemeral := true;
        quantity := 55;
        data := 0, 0;
        nullifier-key := 0;
        nonce := 0;
        rseed := 0;
      };
    action : Action :=
      mkAction@{
        commitments := [];
        nullifiers := [];
        proofs := [];
        app-data := 1;
      };
    resCommitment : Nat := commitment resource;
    resNullifier : Nat := nullifier resource;
  in -- Most of these call return large nouns that are not appropritate for testing.
      -- This test checks that these functions do not crash.
    kind resource
    >-> addDelta (resource-delta resource) (resource-delta resource)
    >-> addDelta (resource-delta resource) (resource-delta resource)
    >-> proveDelta zeroDelta
    >-> trace (subDelta zeroDelta zeroDelta)
    >-> trace (addDelta zeroDelta zeroDelta)
    >-> proveAction action
    >-> trace (actionDelta action)
    >-> trace (isCommitment resCommitment)
    >-> trace (isNullifier resNullifier)
    >-> trace (isCommitment resNullifier)
    >-> trace (isNullifier resCommitment)
    >-> actionsDelta [action];
