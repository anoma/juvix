module delta;

import Stdlib.Prelude open;
import Stdlib.Debug.Trace open;
import ResourceMachine open;
import Encode open;
import ByteArray open;

main : _ :=
  let
    resource : Resource :=
      Resource.mk@{
        label := Label.mk 11;
        logic := Encoded.encode (Logic.mk \{_ := true});
        value := AnomaAtom.fromNat 0;
        nullifierKeyCommitment := NullifierKeyCommitment.toAnomaAtom NullifierKeyCommitment.zero;
        ephemeral := true;
        quantity := 5555 + 3443;
        nonce := Nonce.toAnomaAtom (Nonce.fromNat 0);
        unusedRandSeed := 0;
      };
  --   d : Delta := zeroDelta;
  --   addd : Delta := addDelta zeroDelta zeroDelta;
  --   subd : Delta := subDelta zeroDelta zeroDelta;

  --   appData := AppData.empty;

  --   action : Action :=
  --   Action.create@{
  --   consumed := [];
  --   created := [];
  --   appData := AppData.empty;
  --   };
  -- resCommitment : Commitment := commitment resource;
  -- resNullifier : Nullifier := Resource.Transparent.nullifier resource;
  in kind resource;
