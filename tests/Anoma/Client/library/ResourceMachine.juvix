--- A rendering of https://github.com/anoma/anoma/blob/f52cd44235f35a907c22c428ce1fdf3237c97927/hoon/resource-machine.hoon
module ResourceMachine;

import Stdlib.Prelude open;

Resource-Logic : Type := Public-Inputs -> Private-Inputs -> Bool;

builtin anoma-resource
type Resource :=
  mkResource@{
    label : Nat;
    logic : Resource-Logic;
    ephemeral : Bool;
    quantity : Nat;
    data : Nat;
    --- 256 bits
    nullifier-key : Nat;
    --- nonce for commitments 256 bits
    nonce : Nat;
    rseed : Nat;
  };

open Resource using {mkResource} public;

positive
type Public-Inputs :=
  mkPublic-Inputs@{
    commitments : List Nat;
    nullifiers : List Nat;
    --- exactly one commitment or nullifier
    self-tag : Nat;
    other-public : Nat;
  };

open Public-Inputs using {mkPublic-Inputs} public;

positive
type Private-Inputs :=
  mkPrivate-Inputs@{
    committed-resources : List Resource;
    nullified-resources : List Resource;
    other-private : Nat;
  };

open Private-Inputs using {mkPrivate-Inputs} public;

builtin anoma-delta
axiom Delta : Type;

builtin anoma-kind
axiom Kind : Type;

builtin anoma-resource-commitment
axiom commitment : Resource -> Nat;

builtin anoma-resource-nullifier
axiom nullifier : Resource -> Nat;

builtin anoma-resource-kind
axiom kind : Resource -> Kind;

builtin anoma-resource-delta
axiom resource-delta : Resource -> Delta;

type Logic-Proof : Type :=
  mkLogicProof@{
    resource : Resource;
    inputs : Pair Public-Inputs Private-Inputs;
  };

open Logic-Proof using {mkLogicProof} public;

Compliance-Proof : Type := Nat;

type Proof :=
  | proofCompliance
  | proofLogic Resource (Pair Public-Inputs Private-Inputs);

open Proof using {proofCompliance; proofLogic} public;

mkProofCompliance (_ : Compliance-Proof) : Proof := proofCompliance;

mkProofLogic
  (resource : Resource)
  (publicInputs : Public-Inputs)
  (privateInputs : Private-Inputs)
  : Proof := proofLogic resource (publicInputs, privateInputs);

builtin anoma-action
type Action :=
  mkAction@{
    commitments : List Nat;
    nullifiers : List Nat;
    proofs : List Proof;
    app-data : Nat;
  };

open Action using {mkAction} public;

builtin anoma-action-delta
axiom actionDelta : Action -> Delta;

builtin anoma-actions-delta
axiom actionsDelta : List Action -> Delta;

builtin anoma-prove-action
axiom proveAction : Action -> Nat;

builtin anoma-prove-delta
axiom proveDelta : Delta -> Nat;

builtin anoma-zero-delta
axiom zeroDelta : Delta;

builtin anoma-add-delta
axiom addDelta : Delta -> Delta -> Delta;

builtin anoma-sub-delta
axiom subDelta : Delta -> Delta -> Delta;

Commitment-Root : Type := Nat;

module Transaction;
  type Transaction :=
    mkTransaction@{
      --- root set for spent resources
      roots : List Commitment-Root;
      actions : List Action;
      delta : Delta;
      delta-proof : Nat;
    };

  open Transaction using {mkTransaction} public;

  open Transaction public;

  compose (tx1 tx2 : Transaction) : Transaction :=
    mkTransaction@{
      roots := roots tx1 ++ roots tx2;
      actions := actions tx1 ++ actions tx2;
      delta := addDelta (delta tx1) (delta tx2);
      delta-proof := 0;
    };

end;

open Transaction using {Transaction; mkTransaction} public;
