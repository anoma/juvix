-- Complex input and output
module test077;

import Stdlib.Prelude open;

type Resource :=
  mkResource@{
    fld0 : Field;
    fld1 : Field;
    eph : Bool;
  };

open Resource using {mkResource} public;

type Point :=
  mkPoint@{
    x : Field;
    y : Field;
  };

open Point using {mkPoint} public;

type ComplianceResult :=
  mkResult@{
    cnt : Field;
    x : Field;
    y : Field;
  };

open ComplianceResult using {mkResult} public;

count : List (Pair Field Bool) -> Field
  | [] := 0
  | ((h, b) :: t) := ite b (h + count t) (count t);

main (input : Resource) (path : List (Pair Field Bool)) : ComplianceResult :=
  mkResult@{
    cnt := count path;
    x :=
      if
        | Resource.eph input := Resource.fld0 input + Resource.fld1 input
        | else := Resource.fld0 input;
    y := Resource.fld1 input;
  };
