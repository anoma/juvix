
function apply_1(*, *) : *;
function apply_2(*, *, *) : *;
function apply_3(*, *, *, *) : *;
function apply_4(*, *, *, *, *) : *;
function S(*, *, *) : *;
function K(*, *) : *;
function I(*) : *;
function f3(integer, integer, integer) : integer;
function main() : *;

function apply_1(*, *) : * {
  tmp[0] = arg[0];
  tmp[0] = argsnum tmp[0];
  tmp[1] = 1;
  tmp[0] = eq tmp[1] tmp[0];
  br tmp[0] {
    true: {
      tmp[0] = arg[1];
      tmp[1] = arg[0];
      tcall tmp[1] (tmp[0]);
    };
    false: {
      prealloc 7, live: (arg[0], arg[1]);
      tmp[0] = arg[1];
      tmp[1] = arg[0];
      tmp[0] = cextend tmp[1] (tmp[0]);
      ret tmp[0];
    };
  };
}

function apply_2(*, *, *) : * {
  tmp[1] = arg[0];
  tmp[1] = argsnum tmp[1];
  {
    n = tmp[1];
    tmp[1] = n;
    tmp[2] = 2;
    tmp[1] = eq tmp[2] tmp[1];
    br tmp[1] {
      true: {
        tmp[1] = arg[2];
        tmp[2] = arg[1];
        tmp[3] = arg[0];
        tcall tmp[3] (tmp[2], tmp[1]);
      };
      false: {
        tmp[1] = n;
        tmp[2] = 1;
        tmp[1] = eq tmp[2] tmp[1];
        br tmp[1] {
          true: {
            tmp[1] = arg[2];
            tmp[2] = arg[1];
            tmp[3] = arg[0];
            tmp[2] = call tmp[3] (tmp[2]), live: (tmp[0], tmp[1], arg[0], arg[1], arg[2]);
            tcall apply_1 (tmp[2], tmp[1]);
          };
          false: {
            prealloc 7, live: (tmp[0], arg[0], arg[1], arg[2]);
            tmp[1] = arg[2];
            tmp[2] = arg[1];
            tmp[3] = arg[0];
            tmp[1] = cextend tmp[3] (tmp[2], tmp[1]);
            ret tmp[1];
          };
        };
      };
    };
  };
}

function apply_3(*, *, *, *) : * {
  tmp[1] = arg[0];
  tmp[1] = argsnum tmp[1];
  {
    n = tmp[1];
    tmp[1] = n;
    tmp[2] = 3;
    tmp[1] = eq tmp[2] tmp[1];
    br tmp[1] {
      true: {
        tmp[1] = arg[3];
        tmp[2] = arg[2];
        tmp[3] = arg[1];
        tmp[4] = arg[0];
        tcall tmp[4] (tmp[3], tmp[2], tmp[1]);
      };
      false: {
        tmp[1] = n;
        tmp[2] = 3;
        tmp[1] = lt tmp[2] tmp[1];
        br tmp[1] {
          true: {
            prealloc 7, live: (tmp[0], arg[0], arg[1], arg[2], arg[3]);
            tmp[1] = arg[3];
            tmp[2] = arg[2];
            tmp[3] = arg[1];
            tmp[4] = arg[0];
            tmp[1] = cextend tmp[4] (tmp[3], tmp[2], tmp[1]);
            ret tmp[1];
          };
          false: {
            tmp[1] = n;
            tmp[2] = 2;
            tmp[1] = eq tmp[2] tmp[1];
            br tmp[1] {
              true: {
                tmp[1] = arg[3];
                tmp[2] = arg[2];
                tmp[3] = arg[1];
                tmp[4] = arg[0];
                tmp[2] = call tmp[4] (tmp[3], tmp[2]), live: (tmp[0], tmp[1], arg[0], arg[1], arg[2], arg[3]);
                tcall apply_1 (tmp[2], tmp[1]);
              };
              false: {
                tmp[1] = arg[3];
                tmp[2] = arg[2];
                tmp[3] = arg[1];
                tmp[4] = arg[0];
                tmp[3] = call tmp[4] (tmp[3]), live: (tmp[0], tmp[1], tmp[2], arg[0], arg[1], arg[2], arg[3]);
                tcall apply_2 (tmp[3], tmp[2], tmp[1]);
              };
            };
          };
        };
      };
    };
  };
}

function apply_4(*, *, *, *, *) : * {
  tmp[1] = arg[0];
  tmp[1] = argsnum tmp[1];
  {
    n = tmp[1];
    tmp[1] = n;
    tmp[2] = 4;
    tmp[1] = eq tmp[2] tmp[1];
    br tmp[1] {
      true: {
        tmp[1] = arg[4];
        tmp[2] = arg[3];
        tmp[3] = arg[2];
        tmp[4] = arg[1];
        tmp[5] = arg[0];
        tcall tmp[5] (tmp[4], tmp[3], tmp[2], tmp[1]);
      };
      false: {
        tmp[1] = n;
        tmp[2] = 4;
        tmp[1] = lt tmp[2] tmp[1];
        br tmp[1] {
          true: {
            prealloc 7, live: (tmp[0], arg[0], arg[1], arg[2], arg[3], arg[4]);
            tmp[1] = arg[4];
            tmp[2] = arg[3];
            tmp[3] = arg[2];
            tmp[4] = arg[1];
            tmp[5] = arg[0];
            tmp[1] = cextend tmp[5] (tmp[4], tmp[3], tmp[2], tmp[1]);
            ret tmp[1];
          };
          false: {
            tmp[1] = n;
            tmp[2] = 3;
            tmp[1] = eq tmp[2] tmp[1];
            br tmp[1] {
              true: {
                tmp[1] = arg[4];
                tmp[2] = arg[3];
                tmp[3] = arg[2];
                tmp[4] = arg[1];
                tmp[5] = arg[0];
                tmp[2] = call tmp[5] (tmp[4], tmp[3], tmp[2]), live: (tmp[0], tmp[1], arg[0], arg[1], arg[2], arg[3], arg[4]);
                tcall apply_1 (tmp[2], tmp[1]);
              };
              false: {
                tmp[1] = n;
                tmp[2] = 2;
                tmp[1] = eq tmp[2] tmp[1];
                br tmp[1] {
                  true: {
                    tmp[1] = arg[4];
                    tmp[2] = arg[3];
                    tmp[3] = arg[2];
                    tmp[4] = arg[1];
                    tmp[5] = arg[0];
                    tmp[3] = call tmp[5] (tmp[4], tmp[3]), live: (tmp[0], tmp[1], tmp[2], arg[0], arg[1], arg[2], arg[3], arg[4]);
                    tcall apply_2 (tmp[3], tmp[2], tmp[1]);
                  };
                  false: {
                    tmp[1] = arg[4];
                    tmp[2] = arg[3];
                    tmp[3] = arg[2];
                    tmp[4] = arg[1];
                    tmp[5] = arg[0];
                    tmp[4] = call tmp[5] (tmp[4]), live: (tmp[0], tmp[1], tmp[2], tmp[3], arg[0], arg[1], arg[2], arg[3], arg[4]);
                    tcall apply_3 (tmp[4], tmp[3], tmp[2], tmp[1]);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
}

function S(*, *, *) : * {
  tmp[0] = arg[2];
  tmp[1] = arg[1];
  tmp[0] = call apply_1 (tmp[1], tmp[0]), live: (arg[0], arg[1], arg[2]);
  tmp[1] = arg[2];
  tmp[2] = arg[0];
  tcall apply_2 (tmp[2], tmp[1], tmp[0]);
}

function K(*, *) : * {
  tmp[0] = arg[0];
  ret tmp[0];
}

function I(*) : * {
  prealloc 4, live: (arg[0]);
  tmp[0] = arg[0];
  tmp[1] = calloc K ();
  tmp[2] = calloc K ();
  tcall S (tmp[2], tmp[1], tmp[0]);
}

function f3(integer, integer, integer) : integer {
  tmp[0] = arg[2];
  tmp[1] = arg[1];
  tmp[2] = arg[0];
  tmp[1] = add tmp[2] tmp[1];
  tmp[0] = mul tmp[1] tmp[0];
  ret tmp[0];
}

function main() : * {
  prealloc 14;
  tmp[0] = 7;
  tmp[1] = 1;
  tmp[2] = calloc I ();
  tmp[3] = calloc I ();
  tmp[4] = calloc I ();
  tmp[5] = calloc I ();
  tmp[6] = calloc I ();
  tmp[7] = calloc I ();
  tmp[8] = calloc I ();
  tmp[4] = call apply_4 (tmp[8], tmp[7], tmp[6], tmp[5], tmp[4]), live: (tmp[0], tmp[1], tmp[2], tmp[3]);
  tmp[1] = call apply_3 (tmp[4], tmp[3], tmp[2], tmp[1]), live: (tmp[0]);
  prealloc 6, live: (tmp[0], tmp[1]);
  tmp[2] = 2;
  tmp[3] = calloc I ();
  tmp[4] = calloc I ();
  tmp[5] = calloc I ();
  tmp[2] = call apply_3 (tmp[5], tmp[4], tmp[3], tmp[2]), live: (tmp[0], tmp[1]);
  prealloc 6, live: (tmp[0], tmp[1], tmp[2]);
  tmp[3] = 3;
  tmp[4] = calloc I ();
  tmp[5] = calloc I ();
  tmp[6] = calloc I ();
  tmp[3] = call apply_3 (tmp[6], tmp[5], tmp[4], tmp[3]), live: (tmp[0], tmp[1], tmp[2]);
  prealloc 2, live: (tmp[0], tmp[1], tmp[2], tmp[3]);
  tmp[4] = calloc f3 ();
  tmp[1] = call apply_3 (tmp[4], tmp[3], tmp[2], tmp[1]), live: (tmp[0]);
  prealloc 2, live: (tmp[0], tmp[1]);
  tmp[2] = calloc K ();
  tcall apply_2 (tmp[2], tmp[1], tmp[0]);
}
