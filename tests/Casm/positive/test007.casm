-- closure extension

start:
  call main
  jmp end

ext_10:
  [ap] = 10; ap++
  [ap] = [fp - 3]; ap++
  call extend_closure_1
  ret

app_1:
  [ap] = 1; ap++
  [ap] = [fp - 3]; ap++
  call call_closure
  ret

f:
  [ap] = [fp - 3]; ap++
  call ext_10
  call app_1
  ret


ff:
  [ap] = [fp - 3]; ap++
  call ext_10
  call app_1
--  [ap] = [[ap - 1]]; ap++
  ret

plus:
  [ap] = [fp - 3] + [fp - 4]; ap++
  ret

minus:
  [ap] = [fp - 3] - [fp - 4]; ap++
  ret

mult:
  [ap] = [fp - 3] * [fp - 4]; ap++
  ret

g:
  [ap] = [fp - 3] - [fp - 4]; ap++
  [ap] = [ap - 1] + [fp - 5]; ap++
  [ap] = [ap - 1] * [fp - 6]; ap++
  ret

main:
  -- calloc plus 0
  call get_regs
  [ap] = 1; ap++
  [ap] = 9; ap++
  [ap] = 7; ap++
  [ap] = [ap - 5] + 2; ap++
  call f
  call rel 3
  nop
  ret
  -- [fp - 3] = 11
  -- calloc minus 0
  call get_regs
  [ap] = 4; ap++
  [ap] = 9; ap++
  [ap] = 7; ap++
  [ap] = [ap - 5] + 2; ap++
  call f
  [ap] = [fp - 3]; ap++
  call rel 3
  nop
  ret
  -- [fp - 4] = 9
  -- [fp - 3] = 11
  -- calloc mult 0
  call get_regs
  [ap] = 7; ap++
  [ap] = 9; ap++
  [ap] = 7; ap++
  [ap] = [ap - 5] + 2; ap++
  call f
  [ap] = [fp - 4]; ap++
  [ap] = [fp - 3]; ap++
  call rel 3
  nop
  ret
  -- [fp - 5] = 10
  -- [fp - 4] = 9
  -- [fp - 3] = 11
  [ap] = [fp - 5] + [fp - 4]; ap++
  [ap] = [ap - 1] + [fp - 3]; ap++
  -- [fp + 1] = 30
  -- calloc g 2
  call get_regs
  [ap] = 10; ap++
  [ap] = 7; ap++
  [ap] = 7; ap++
  [ap] = 3; ap++
  [ap] = 2; ap++
  [ap] = [ap - 7] + 2; ap++
  call ff
  -- 11
  [ap] = [fp + 1] + [ap - 1]; ap++
  ret
  -- result: 41

get_regs:
  call get_ap_reg
  ret
get_ap_reg:
  ret

-- [fp - 3]: closure; [fp - 4]: argument
extend_closure_1:
  -- copy stored args reversing them
  jmp rel [[fp - 3] + 1]
  [ap] = [[fp - 3] + 10]; ap++
  [ap] = [[fp - 3] + 9]; ap++
  [ap] = [[fp - 3] + 8]; ap++
  [ap] = [[fp - 3] + 7]; ap++
  [ap] = [[fp - 3] + 6]; ap++
  [ap] = [[fp - 3] + 5]; ap++
  [ap] = [[fp - 3] + 4]; ap++
  [ap] = [[fp - 3] + 3]; ap++
  [ap] = 10; ap++
  [ap] = [[fp - 3] + 1]; ap++
  [ap] = [ap - 2] - [ap - 1]; ap++
  jmp rel [ap - 1]
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  -- now ap = fp + 11
  -- alloc closure header
  call get_regs
  -- now ap = fp + 15
  -- [fp + 15] = closure pointer
  [ap] = [ap - 2] + 7; ap++
  -- [fp + 16] = 9 - sargs
  [ap] = [[fp - 3] + 1]; ap++
  -- [fp + 17] = 9 - argsnum (expected)
  [ap] = [[fp - 3] + 2]; ap++
  -- [fp + 18] = 9
  [ap] = 9; ap++
  -- [fp + 19] = sargs
  [ap] = [fp + 18] - [fp + 16]; ap++
  [ap] = [[fp - 3]]; ap++
  [ap] = [fp + 16] - 1; ap++
  [ap] = [fp + 17] + 1; ap++
  -- end alloc closure header
  -- jmp rel (9 - sargs)
  jmp rel [fp + 16]
  [ap] = [fp + 7]; ap++
  [ap] = [fp + 6]; ap++
  [ap] = [fp + 5]; ap++
  [ap] = [fp + 4]; ap++
  [ap] = [fp + 3]; ap++
  [ap] = [fp + 2]; ap++
  [ap] = [fp + 1]; ap++
  [ap] = [fp]; ap++
  -- extra args
  [ap] = [fp - 4]; ap++
  [ap] = [fp + 15]; ap++
  ret

-- [fp - 3]: closure; [fp - 3 - k]: argument k to closure call
call_closure:
  -- jmp rel (9 - argsnum)
  jmp rel [[fp - 3] + 2]
  [ap] = [fp - 11]; ap++
  [ap] = [fp - 10]; ap++
  [ap] = [fp - 9]; ap++
  [ap] = [fp - 8]; ap++
  [ap] = [fp - 7]; ap++
  [ap] = [fp - 6]; ap++
  [ap] = [fp - 5]; ap++
  [ap] = [fp - 4]; ap++
  -- jmp rel (9 - sargs)
  jmp rel [[fp - 3] + 1]
  [ap] = [[fp - 3] + 10]; ap++
  [ap] = [[fp - 3] + 9]; ap++
  [ap] = [[fp - 3] + 8]; ap++
  [ap] = [[fp - 3] + 7]; ap++
  [ap] = [[fp - 3] + 6]; ap++
  [ap] = [[fp - 3] + 5]; ap++
  [ap] = [[fp - 3] + 4]; ap++
  [ap] = [[fp - 3] + 3]; ap++
  jmp rel [[fp - 3]]
  call plus
  ret
  nop
  call minus
  ret
  nop
  call mult
  ret
  nop
  call g
  ret
  nop

end:
