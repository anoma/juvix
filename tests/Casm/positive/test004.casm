-- Indirect call

start:
  call main
  jmp end

calculate:
  [ap] = [fp - 3] * [fp - 4]; ap++
  [ap] = [fp - 5] + [ap - 1]; ap++
  ret

main:
  call get_regs
  -- [fp + 4] = closure pointer
  [ap] = [ap - 2] + 3; ap++
  -- FUID(calculate) = 1
  [ap] = 1; ap++
  -- 9 - stored args num
  [ap] = 7; ap++
  -- 9 - argsnum (remaining expected)
  [ap] = 8; ap++
  -- args
  [ap] = 5; ap++
  [ap] = 3; ap++
  [ap] = 2; ap++
  [ap] = [fp + 4]; ap++
  call call_closure
  ret

get_regs:
  call get_ap_reg
  ret
get_ap_reg:
  ret

-- [fp - 3]: closure; [fp - 3 - k]: argument k to closure call
call_closure:
  -- jmp rel (9 - argsnum)
  jmp rel [[fp - 3] + 2]
  [ap] = [fp - 11]; ap++
  [ap] = [fp - 10]; ap++
  [ap] = [fp - 9]; ap++
  [ap] = [fp - 8]; ap++
  [ap] = [fp - 7]; ap++
  [ap] = [fp - 6]; ap++
  [ap] = [fp - 5]; ap++
  [ap] = [fp - 4]; ap++
  -- jmp rel (9 - sargs)
  jmp rel [[fp - 3] + 1]
  [ap] = [[fp - 3] + 10]; ap++
  [ap] = [[fp - 3] + 9]; ap++
  [ap] = [[fp - 3] + 8]; ap++
  [ap] = [[fp - 3] + 7]; ap++
  [ap] = [[fp - 3] + 6]; ap++
  [ap] = [[fp - 3] + 5]; ap++
  [ap] = [[fp - 3] + 4]; ap++
  [ap] = [[fp - 3] + 3]; ap++
  jmp rel [[fp - 3]]
  call calculate
  ret

end:
