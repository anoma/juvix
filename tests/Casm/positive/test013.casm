-- currying and uncurrying

start:
  call main
  jmp end

app:
  [ap] = [fp - 4]; ap++
  [ap] = [fp - 3]; ap++
  call call_closure
  ret

app':
  [ap] = [fp - 5]; ap++
  [ap] = [fp - 4]; ap++
  [ap] = [fp - 3]; ap++
  call call_closure
  ret

inc:
  [ap] = [fp - 3] + 1; ap++
  ret

h:
  call get_regs
  -- calloc inc
  [ap] = 1; ap++
  [ap] = 9; ap++
  [ap] = 8; ap++
  [ap] = [ap - 5] + 2; ap++
  [ap] = [fp - 3]; ap++
  call extend_closure_1
  ret

capp:
  [ap] = [fp - 4]; ap++
  [ap] = [fp - 3]; ap++
  call extend_closure_1
  ret

curry:
  call get_regs
  -- calloc capp
  [ap] = 4; ap++
  [ap] = 8; ap++
  [ap] = 8; ap++
  [ap] = [fp - 3]; ap++
  [ap] = [ap - 6] + 2; ap++
  ret

uapp:
  [ap] = [fp - 4]; ap++
  [ap] = [fp - 3]; ap++
  call call_closure
  [ap] = [fp - 5]; ap++
  [ap] = [ap - 2]; ap++
  call call_closure
  ret

uncurry:
  call get_regs
  -- calloc uapp
  [ap] = 7; ap++
  [ap] = 8; ap++
  [ap] = 7; ap++
  [ap] = [fp - 3]; ap++
  [ap] = [ap - 6] + 2; ap++
  ret

main:
  ap += 4

  call get_regs
  [fp] = [ap - 2] + 2
  -- calloc inc
  [ap] = 1; ap++
  [ap] = 9; ap++
  [ap] = 8; ap++
  call get_regs
  -- calloc app
  [ap] = 10; ap++
  [ap] = 9; ap++
  [ap] = 7; ap++
  [ap] = 5; ap++
  [ap] = [fp]; ap++
  [ap] = [ap - 7] + 2; ap++
  call app'
  [fp + 2] = [ap - 1]

  call get_regs
  -- calloc app
  [ap] = 10; ap++
  [ap] = 9; ap++
  [ap] = 7; ap++
  [ap] = [ap - 5] + 2; ap++
  call h
  [ap] = 4; ap++
  [ap] = [ap - 2]; ap++
  call call_closure
  [fp + 3] = [fp + 2] + [ap - 1]

  -- uncurry (curry app) inc 7
  call get_regs
  -- calloc app
  [ap] = 10; ap++
  [ap] = 9; ap++
  [ap] = 7; ap++
  [ap] = [ap - 5] + 2; ap++
  call curry
  call uncurry
  [fp + 1] = [ap - 1]
  call get_regs
  -- calloc inc
  [ap] = 1; ap++
  [ap] = 9; ap++
  [ap] = 8; ap++
  [ap] = 7; ap++
  [ap] = [ap - 6] + 2; ap++
  [ap] = [fp + 1]; ap++
  call call_closure
  [ap] = [fp + 3] + [ap - 1]; ap++
  ret

get_regs:
  call get_ap_reg
  ret
get_ap_reg:
  ret

-- [fp - 3]: closure; [fp - 3 - k]: argument k to closure call
call_closure:
  ap += 1
  -- closure addr
  [fp] = [[fp - 3]]
  -- jmp rel (9 - argsnum)
  jmp rel [[fp - 3] + 2]
  [ap] = [fp - 11]; ap++
  [ap] = [fp - 10]; ap++
  [ap] = [fp - 9]; ap++
  [ap] = [fp - 8]; ap++
  [ap] = [fp - 7]; ap++
  [ap] = [fp - 6]; ap++
  [ap] = [fp - 5]; ap++
  [ap] = [fp - 4]; ap++
  -- jmp rel (9 - sargs)
  jmp rel [[fp - 3] + 1]
  [ap] = [[fp - 3] + 10]; ap++
  [ap] = [[fp - 3] + 9]; ap++
  [ap] = [[fp - 3] + 8]; ap++
  [ap] = [[fp - 3] + 7]; ap++
  [ap] = [[fp - 3] + 6]; ap++
  [ap] = [[fp - 3] + 5]; ap++
  [ap] = [[fp - 3] + 4]; ap++
  [ap] = [[fp - 3] + 3]; ap++
  jmp rel [fp]
  call inc
  ret
  nop
  call capp
  ret
  nop
  call uapp
  ret
  nop
  call app
  ret
  nop


-- [fp - 3]: closure; [fp - 4]: argument
extend_closure_1:
  -- copy stored args reversing them
  jmp rel [[fp - 3] + 1]
  [ap] = [[fp - 3] + 10]; ap++
  [ap] = [[fp - 3] + 9]; ap++
  [ap] = [[fp - 3] + 8]; ap++
  [ap] = [[fp - 3] + 7]; ap++
  [ap] = [[fp - 3] + 6]; ap++
  [ap] = [[fp - 3] + 5]; ap++
  [ap] = [[fp - 3] + 4]; ap++
  [ap] = [[fp - 3] + 3]; ap++
  [ap] = 10; ap++
  [ap] = [[fp - 3] + 1]; ap++
  [ap] = [ap - 2] - [ap - 1]; ap++
  jmp rel [ap - 1]
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  [ap] = [ap - 1]; ap++
  -- now ap = fp + 11
  ap += 5
  -- alloc closure header
  call get_regs
  [fp + 11] = [ap - 2] + 2
  [ap] = [[fp - 3]]; ap++
  -- 9 - sargs
  [fp + 12] = [[fp - 3] + 1]
  [ap] = [fp + 12] - 1; ap++
  -- 9 - argsnum (expected)
  [fp + 13] = [[fp - 3] + 2]
  [ap] = [fp + 13] + 1; ap++
  -- end alloc closure header
  [fp + 14] = 9
  -- [fp + 15] = sargs
  [fp + 15] = [fp + 14] - [fp + 12]
  -- jmp rel (9 - sargs)
  jmp rel [fp + 12]
  [ap] = [fp + 7]; ap++
  [ap] = [fp + 6]; ap++
  [ap] = [fp + 5]; ap++
  [ap] = [fp + 4]; ap++
  [ap] = [fp + 3]; ap++
  [ap] = [fp + 2]; ap++
  [ap] = [fp + 1]; ap++
  [ap] = [fp]; ap++
  -- extra args
  [ap] = [fp - 4]; ap++
  [ap] = [fp + 11]; ap++
  ret

end:
