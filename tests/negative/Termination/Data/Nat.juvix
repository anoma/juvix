module Data.Nat;

type ℕ :=
  | zero : ℕ
  | suc : ℕ → ℕ;

syntax infixl 6 +;

+ : ℕ → ℕ → ℕ
  | zero b := b
  | (suc a) b := suc (a + b);

syntax infixl 7 *;

* : ℕ → ℕ → ℕ
  | zero b := zero
  | (suc a) b := b + a * b;

import Data.Bool;
open Data.Bool;

even : ℕ → Bool
  
  | zero := true
  | (suc n) := odd n;

odd : ℕ → Bool
  
  | zero := false
  | (suc n) := even n;
