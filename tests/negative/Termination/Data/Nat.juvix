module Data.Nat;
  type ℕ  :=
    zero : ℕ |
    suc : ℕ → ℕ;

  infixl 6 +;
  + : ℕ → ℕ → ℕ;
  + zero b := b;
  + (suc a) b := suc (a + b);

  infixl 7 *;
  * : ℕ → ℕ → ℕ;
  * zero b := zero;
  * (suc a) b := b + a * b;

  import Data.Bool;
  open Data.Bool;

  even : ℕ → Bool;
  odd : ℕ → Bool;

  even zero := true;
  even (suc n) := odd n;

  odd zero := false;
  odd (suc n) := even n;
end;
