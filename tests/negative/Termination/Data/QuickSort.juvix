module Data.QuickSort;

import Data.Bool;
open Data.Bool;

import Data.Nat;
open Data.Nat;

type List (A : Type) :=
  | nil : List A
  | cons : A → List A → List A;

open List;

filter : {A : Type} → (A → Bool) → List A → List A
  | f nil := nil
  | f (cons h hs) :=
    ite (f h) (cons h (filter f hs)) (filter f hs);

concat : {A : Type} → List A → List A → List A
  | nil ys := ys
  | (cons x xs) ys := cons x (concat xs ys);

ltx : {A : Type} → (A → A → Bool) → A → A → Bool
  | lessThan x y := lessThan y x;

gex : {A : Type} → (A → A → Bool) → A → A → Bool
  | lessThan x y := not (ltx lessThan x y);

quicksort : {A : Type} → (A → A → Bool) → List A → List A
  | _ nil := nil
  | _ (cons x nil) := cons x nil
  | lessThan (cons x ys) :=
    concat
      (quicksort lessThan (filter (ltx lessThan x) ys))
      (concat
        (cons x nil)
        (quicksort lessThan (filter (gex lessThan x) ys)));
