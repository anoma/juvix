module SubsumedInstance;

type Unit := unit;
open Unit;

type Box A := box A;
open Box;

trait
type T A := mkT {pp : A → A};
open T using {mkT};

instance
unitT : T Unit :=
  mkT@{
    pp := λ {_ := unit}
  };

ppBox {A} {{T A}} : Box A → Box A
  | (box x) := box (T.pp x);

instance
boxT {A} {{T A}} : T (Box A) :=
  mkT@{
    pp := ppBox
  };

instance
boxTUnit : T (Box Unit) :=
  mkT@{
    pp := λ {x := x}
  };

main : Box Unit := T.pp (box unit);
