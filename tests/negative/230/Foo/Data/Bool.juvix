module Foo.Data.Bool;

import Stdlib.Data.Bool;

syntax fixity logical := binary {assoc := right};

type Bool :=
  | true : Bool
  | false : Bool;

open Bool using {true; false} public;

not : Bool → Bool
  | true := false
  | false := true;

syntax operator || logical;

|| : Bool → Bool → Bool
  | false a := a
  | true _ := true;

syntax operator && logical;

&& : Bool → Bool → Bool
  | false _ := false
  | true a := a;

ite : {A : Type} → Bool → A → A → A
  | true a _ := a
  | false _ b := b;
