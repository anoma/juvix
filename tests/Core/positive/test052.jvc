-- foldl with match

type List {
    nil : Π A : Type, List A;
    cons : Π A : Type, A → List A → List A;
};

def foldl : Π A : Type, Π B : Type, (B → A → B) → B → List A → B :=
    λ(A : Type) λ(B : Type) λ(f : B → A → B) λ(b : B) λ(l : List A)
    match (l : List A) with : B {
        nil _ := b;
        cons _ (h : A) (hs : List A) := foldl A B f (f b h) hs
    };

foldl Int Int (+) 0 (cons Int 1 (cons Int 2 (cons Int 3 (nil Int))))
