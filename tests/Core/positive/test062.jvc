--- anoma builtins

type t : Type {
   ctor : Int -> t;
};

type tClosure : Type {
   ctorCl : (Int -> Int) -> tClosure;
};

def privKey : Int := 11617894433197913967256772080085224292574263152640782716628013903136761875218972825378605552167075549144813844196048766885080313195607865362963533894031960;

def pubKey : Int := 100334094580390620383139794340338190270834129828455530198518726236886616013505;

def v1 : t := ctor 10;
def v2 : t := ctor 0;
def f1 : Int -> Int := \x 2 * x;
def v3 : tClosure := ctorCl f1;

def writeLn := \x write x >> write "\n";

def projectClosure := \t match t with {
  ctorCl f := f;
};

writeLn (anoma-decode (anoma-encode v1) = v1)
>> writeLn (projectClosure (anoma-decode (anoma-encode v3)) 10 = 20)
>> writeLn (anoma-verify-with-message (anoma-sign v1 privKey) pubKey = just v1)
>> writeLn (anoma-verify-with-message (anoma-sign v1 privKey) privKey = nothing)
>> writeLn (anoma-verify-detached (anoma-sign-detached v1 privKey) v1 pubKey)
>> writeLn (anoma-verify-detached (anoma-sign-detached v1 privKey) v2 pubKey)
