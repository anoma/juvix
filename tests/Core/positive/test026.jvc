-- nested case, let & if

type tree {
  leaf : tree;
  node : tree -> tree -> tree;
};

def gen := \n if n <= 0 then leaf else node (gen (n - 2)) (gen (n - 1));

def g;

def f := \t case t of {
  leaf := 1;
  node l r :=
    let l := g l in
    let r := g r in
    let a := case l of {
      leaf := 0 - 3;
      node l r := f l + f r
    } in
    let b := case r of {
      node l r := f l + f r;
      _ := 2
    } in
    a * b
};

def isNode := \t case t of { node _ _ := true; _ := false };
def isLeaf := \t case t of { leaf := true; _ := false };

def g := \t if isLeaf t then t else case t of {
  node l r := if isNode l then r else node r l
};

def writeLn := \x write x >> write "\n";

writeLn (f (gen 10)) >>
writeLn (f (gen 15)) >>
writeLn (f (gen 16)) >>
writeLn (f (gen 17))
