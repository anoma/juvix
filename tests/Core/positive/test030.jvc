-- streams without memoization

type Unit {
  unit : Unit;
};

type list {
  nil : list;
  cons : any -> list -> list;
};

type Stream {
  scons : any -> (Unit -> Stream) -> Stream;
};

def force : (Unit -> Stream) -> Stream := \f f unit;

def filter : (any -> bool) -> (Unit -> Stream) -> Unit -> Stream := \p \s \_
  case force s of {
    scons h t :=
      if p h then
        scons h (filter p t)
      else
        force (filter p t)
  };

def take : int -> (Unit -> Stream) -> list := \n \s
  if n = 0 then
    nil
  else
    case force s of {
      scons h t := cons h (take (n - 1) t)
    };

def nth : int -> (Unit -> Stream) -> any := \n \s
  case force s of {
    scons h t := if n = 0 then h else nth (n - 1) t
  };

def numbers : int -> Unit -> Stream := \n \_ scons n (numbers (n + 1));

def indivisible : int -> int -> bool := \n \x if x % n = 0 then false else true;
def eratostenes : (Unit -> Stream) -> Unit -> Stream := \s \_
  case force s of {
    scons n t :=
      scons n (eratostenes (filter (indivisible n) t))
  };
def primes : Unit -> Stream := eratostenes (numbers 2);

def writeLn := \x write x >> write "\n";

writeLn (take 10 primes) >>
writeLn (nth 100 primes)
