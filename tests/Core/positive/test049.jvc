-- lifting and polymorphism

type Boxed {
    Box : Π A : Type, A → Boxed A
};

def g : Π A : Type, A → Boxed A → A → A := λ(A : Type) λ(a : A) λ(_ : Boxed A) λ(a' : A) a;

def f : Π A : Type, Int → Int → Boxed A → Int → A → A :=
    λ(A : Type) λ(n : Int) λ(m : Int) λ(b : Boxed A) λ(k : Int) λ(a' : A)
        case b of {
            Box _ a := (λ(_ : Int) g A a b a') (n + m + k);
        };

f Int 0 1 (Box Int 1) 2 3
