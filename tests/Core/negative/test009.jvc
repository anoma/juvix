-- erroneous Church numerals

type product {
  pair : Any -> Any -> product;
};

def fst := \p case p of { pair x _ := x };
def snd := \p case p of { pair _ x := x };

def compose := \f \g \x f (g x);

def czero := \f \x x;

def num := \n
  if n = 0 then
    czero
  else
    \f compose f (num (n - 1) f);

def succ := \n \f compose f n; -- wrong

def isZero := \n n (\_ false) true;

def pred := \n
  fst (
    n (\x
        if isZero (snd x) then
          pair (fst x) (succ (snd x))
        else
          pair (succ (fst x)) (succ (snd x)))
      (pair czero czero)
  );

def toInt := \n n (+ 1) 0;

toInt (pred (num 7))
