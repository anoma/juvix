working-directory: ./../../../

tests:
  - name: shows-file-argument-for-autocompletion
    command:
      - juvix
      - compile
      - --help
    stdout:
      contains:
        JUVIX_FILE
    exit-status: 0

  - name: hello-world-no-arg
    command:
      shell:
        - bash
      script: |
        cd ./examples/milestone/HelloWorld
        juvix compile
        ./HelloWorld
    exit-status: 0
    stdout: |
      hello world!

  - name: hello-world-no-arg-error
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        cd ./examples/milestone/
        cp -r HelloWorld "$temp"
        cd "$temp/HelloWorld"
        sed -i'.bak' 's/just \"HelloWorld.juvix\"/nothing/' Package.juvix
        juvix compile
    exit-status: 1
    stdout: |
     A path to the main file must be given in the CLI or specified in the `main` field of the juvix.yaml file

  - name: hello-world
    command:
      shell:
        - bash
      script: |
        cd ./examples/milestone/HelloWorld
        juvix compile HelloWorld.juvix
        ./HelloWorld
    exit-status: 0
    stdout: |
      hello world!

  - name: option-output-file
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        cd ./examples/milestone/HelloWorld
        juvix compile -o $temp/Hello HelloWorld.juvix
        $temp/Hello
    exit-status: 0
    stdout: |
      hello world!

  - name: flag-internal-build-dir
    command:
      shell:
        - bash
      script: |
        buildDir=$(mktemp -d)
        rootDir=$(mktemp -d)
        trap 'rm -rf -- "$buildDir"' EXIT
        trap 'rm -rf -- "$rootDir"' EXIT

        cp ./examples/milestone/HelloWorld/HelloWorld.juvix "$rootDir"
        touch "$rootDir/juvix.yaml"

        cd "$rootDir"
        juvix compile HelloWorld.juvix --internal-build-dir "$buildDir"

        num_files=$(ls -1qA "$buildDir" | wc -l)
        if [ $num_files -le 0 ]; then
          exit 1
        fi

        if [ -d "$rootDir/.juvix-build" ]; then
          exit 1
        fi
    stdout: ""
    exit-status: 0

  - name: stdlib-in-default-build-dir
    command:
      shell:
        - bash
      script: |
        rootDir=$(mktemp -d)
        trap 'rm -rf -- "$rootDir"' EXIT

        cp ./examples/milestone/HelloWorld/HelloWorld.juvix "$rootDir"
        touch "$rootDir/juvix.yaml"
        echo "dependencies: [.juvix-build/stdlib]" >> "$rootDir/juvix.yaml"

        cd "$rootDir"
        juvix compile HelloWorld.juvix

        if [ ! -d "$rootDir/.juvix-build" ]; then
          exit 1
        fi
    stdout: ""
    exit-status: 0

  - name: default-output-file-in-invoke-dir
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        testdir=$PWD/examples/milestone/HelloWorld
        cd $temp
        juvix compile $testdir/HelloWorld.juvix
        ./HelloWorld
    stdout: |
      hello world!
    exit-status: 0

  - name: target-wasm
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        testdir=$PWD/examples/milestone/HelloWorld
        cd $temp
        juvix compile -t wasm32-wasi $testdir/HelloWorld.juvix
        [ -f HelloWorld.wasm ]
    stdout: ""
    exit-status: 0

  - name: target-geb
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        testdir=$PWD/tests/Geb/positive/Compilation
        cd $temp
        juvix compile -t geb $testdir/test001.juvix
        [ -f test001.lisp ]
    stdout: ""
    exit-status: 0

  - name: target-anoma
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        testdir=$PWD/tests/Anoma/Compilation/positive
        cd $temp
        juvix compile -t anoma $testdir/test001.juvix
        [ -f test001.nockma ]
        juvix dev nockma repl test001.nockma
    stdout:
      contains:
        "6"
    stdin: "[call [L [replace [RL [quote 0]] [@ S]]]]"
    exit-status: 0

  - name: target-vampir
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        testdir=$PWD/tests/VampIR/positive/Compilation
        cd $temp
        juvix compile -t vampir $testdir/test001.juvix
        grep -q 'VampIR runtime for Juvix (safe version)' test001.pir
    stdout: ""
    exit-status: 0

  - name: target-varmpir-unsafe
    command:
      shell:
        - bash
      script: |
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        testdir=$PWD/tests/VampIR/positive/Compilation
        cd $temp
        juvix compile -t vampir $testdir/test001.juvix --unsafe
        grep -q 'VampIR runtime for Juvix (unsafe version)' test001.pir
    stdout: ""
    exit-status: 0

  - name: input-file-does-not-exist
    command:
      - juvix
      - compile
      - positive/NonExistingCompileFile.juvix
    stderr:
      contains: |
        positive/NonExistingCompileFile.juvix" does not exist
    exit-status: 1

  - name: hello-world-symlink-XDG_CONFIG_DIR
    command:
      shell:
        - bash
      script: |
        base=$PWD
        config=$(mktemp -d)
        temp=$(mktemp -d)
        trap 'rm -rf -- "$temp"' EXIT
        trap 'rm -rf -- "$config"' EXIT
        mkdir "$config/root"
        ln -s "$config/root" "$config/symlink"
        cd $temp
        cp "$base"/examples/milestone/HelloWorld/HelloWorld.juvix .
        export XDG_CONFIG_HOME="$config/symlink"
        juvix compile HelloWorld.juvix
        ./HelloWorld
    exit-status: 0
    stdout: |
      hello world!
