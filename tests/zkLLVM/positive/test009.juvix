-- applications with lets and cases in function position
module test009;

import Stdlib.Prelude open;
import Stdlib.Data.Nat.Ord open;

f (a : Nat) (l : ((Nat -> Nat) -> Nat -> Nat) × Nat)
  : Nat :=
  case l of {
      | x, zero := x
      | _ := id
    }
    (let
      y : Nat → Nat := id;
    in (let
        z : (Nat → Nat) → Nat → Nat := id;
      in case l of {
          | _, zero := id
          | _ := id
        }
        z)
      y)
    a;

main (a b c : Nat) : Bool :=
  f a (λ {| x y := x y + b}, c) == 9;
