
function compose(* → *, * → *, *) : *;
function id(*) : *;
function iterate(* → *, integer) : * → *;
function inc(integer) : integer;
function plus(integer, integer) : integer;
function mult(integer, integer) : integer;
function exp(integer, integer) : integer;
function main() : *;

function compose(* → *, * → *, *) : * {
  call(arg[0], call(arg[1], arg[2]))
}

function id(*) : * {
  arg[0]
}

function iterate(* → *, integer) : * → * {
  br(eq(arg[1], 0)) {
    true: calloc[id]()
    false: calloc[compose](arg[0], call[iterate](arg[0], sub(arg[1], 1)))
  }
}

function inc(integer) : integer {
  add(arg[0], 1)
}

function plus(integer, integer) : integer {
  call(call[iterate](calloc[inc](), arg[0]), arg[1])
}

function mult(integer, integer) : integer {
  call(call[iterate](calloc[plus](arg[1]), arg[0]), 0)
}

function exp(integer, integer) : integer {
  call(call[iterate](calloc[mult](arg[0]), arg[1]), 1)
}

function main() : * {
  seq(seq(seq(save(call[plus](3, 7)) {
    seq(trace(tmp[0]), tmp[0])
  }, save(call[mult](3, 7)) {
    seq(trace(tmp[0]), tmp[0])
  }), save(call[exp](3, 7)) {
    seq(trace(tmp[0]), tmp[0])
  }), void)
}
