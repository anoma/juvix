type tree {
  leaf : tree;
  node : (tree, tree) â†’ tree;
}

function gen(integer) : tree;
function g(tree) : tree;
function f(tree) : integer;
function isNode(tree) : bool;
function isLeaf(tree) : bool;
function main() : *;

function gen(integer) : tree {
  br(le(arg[0], 0)) {
    true: alloc[leaf]()
    false: alloc[node](call[gen](sub(arg[0], 2)), call[gen](sub(arg[0], 1)))
  }
}

function g(tree) : tree {
  br(call[isLeaf](arg[0])) {
    true: arg[0]
    false: case[tree](arg[0]) {
      node: save {
        br(call[isNode](tmp[0].node[0])) {
          true: tmp[0].node[1]
          false: alloc[node](tmp[0].node[0], tmp[0].node[1])
        }
      }
    }
  }
}

function f(tree) : integer {
  case[tree](arg[0]) {
    leaf: 1
    node: save {
      save(call[g](tmp[0].node[0])) {
        save(call[g](tmp[0].node[1])) {
          save(case[tree](tmp[1]) {
            leaf: sub(0, 3)
            node: save {
              mod(add(call[f](tmp[3].node[0]), call[f](tmp[3].node[1])), 32768)
            }
          }) {
            save(case[tree](tmp[2]) {
              node: save {
                mod(add(call[f](tmp[4].node[0]), call[f](tmp[4].node[1])), 32768)
              }
              default: 2
            }) {
              mod(mul(tmp[4], tmp[3]), 32768)
            }
          }
        }
      }
    }
  }
}

function isNode(tree) : bool {
  case[tree](arg[0]) {
    node: true
    default: false
  }
}

function isLeaf(tree) : bool {
  case[tree](arg[0]) {
    leaf: true
    default: false
  }
}

function main() : * {
  seq(seq(seq(seq(save(call[f](call[gen](10))) {
    seq(trace(tmp[0]), tmp[0])
  }, save(call[f](call[gen](15))) {
    seq(trace(tmp[0]), tmp[0])
  }), save(call[f](call[gen](16))) {
    seq(trace(tmp[0]), tmp[0])
  }), save(call[f](call[gen](17))) {
    seq(trace(tmp[0]), tmp[0])
  }), void)
}
