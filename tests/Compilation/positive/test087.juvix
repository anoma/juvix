-- Deriving Ord
module test087;

import Stdlib.Data.Fixity open;
import Stdlib.Data.Bool open;
import Stdlib.Data.Pair open;
import Stdlib.Trait.Ord open;
import Stdlib.System.IO open;

syntax alias compare := Ord.compare;

type T :=
  | One
  | Two
  | Three
  | Four;

open T using {One; Two; Three; Four} public;

deriving instance
ordT : Ord T;

type Tree (A : Type) :=
  | leaf
  | node (Tree A) A (Tree A);

open Tree using {leaf; node} public;

deriving instance
ordTree {A} {{Ord A}} : Ord (Tree A);

main : IO :=
  printLn (compare One One)
    >>> printLn (compare One Two)
    >>> printLn (compare Two One)
    >>> printLn (compare (One, One) (One, Three))
    >>> printLn (compare (Four, Four) (Four, Three))
    >>> printLn
      (compare (node leaf Four leaf) (node (node leaf One leaf) Two leaf))
    >>> printLn
      (compare
        (node (node leaf One leaf) Four leaf)
        (node (node leaf One leaf) Two leaf))
    >>> printLn
      (compare
        (node (node leaf One leaf) Four leaf)
        (node (node leaf One leaf) Four leaf));
