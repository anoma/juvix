-- Constant folding
module test064;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail as Debug;

{-# inline: false #-}
f (x y : Nat) : Nat := x + y;

{-# inline: false #-}
g (x : Bool) : Bool := ite x (Debug.failwith "a") true;

{-# inline: false #-}
h (x : Bool) : Bool := ite (g x) false true;

{-# inline: false, eval: false #-}
j (x : Nat) : Nat := x + 0;

sum : Nat -> Nat
  | zero := 0
  | k@(suc n) := k + sum n;

even : Nat -> Bool
  | zero := true
  | (suc n) := odd n;

odd : Nat -> Bool
  | zero := false
  | (suc n) := even n;

terminating
loop : Nat := loop;

{-# inline: false #-}
even' : Nat -> Bool := even;

main : Nat :=
  sum 3
    + case even' 6 || g true || h true of {
        | true := ite (g false) (f 1 2 + sum 7 + j 0) 0
        | false := f (3 + 4) (f 0 8) + loop
      };
