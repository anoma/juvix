-- Minimal test where lambda lifting causes the type of a let body to contain
-- the bound item
module test084;

type Phantom (M : Type) := nothing;

open Phantom using {nothing} public;

open Phantom;

type T := mk;

open T using {mk} public;

type Monad (f : Type -> Type) :=
  mkMonad@{
    bind : f T -> (T -> f T) -> f T;
  };

open Monad using {mkMonad} public;

open Monad;

maybeMonad : Monad Phantom :=
  mkMonad@{
    bind : Phantom T -> (T -> Phantom T) -> Phantom T
      | _ _ := nothing;
  };

minusThree : Phantom T :=
  bind
    maybeMonad
    (nothing {T})
    λ{_ :=
      let
        x2' : T := T.mk;
      in bind maybeMonad nothing λ{_ := nothing}};

main : Phantom T := minusThree;
