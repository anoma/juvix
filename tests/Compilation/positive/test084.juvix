-- Do notation
module test084;

import Stdlib.Data.Nat.Base open;
import Stdlib.System.IO open;
import Stdlib.Data.Maybe open;

trait
type Functor (f : Type -> Type) := mkFunctor;

trait
type Monad (f : Type -> Type) :=
  mkMonad@{
    {{MonadFunctor}} : Functor f;

    builtin monad-bind
    bind : {A B : Type} -> f A -> (A -> f B) -> f B;
  };

open Functor;
open Monad;

instance
maybeFunctor : Functor Maybe := mkFunctor;

instance
maybeMonad : Monad Maybe :=
  mkMonad@{
    bind {A B} : Maybe A -> (A -> Maybe B) -> Maybe B
      | nothing _ := nothing
      | (just a) f := f a;
  };

minusOne : Nat -> Maybe Nat
  | zero := nothing
  | (suc n) := just n;

minusThree (n : Nat) : Maybe Nat :=
  do {
    x1 <- minusOne n;
    let
      x2' : Nat := 4;
    in
    x3 <- minusOne 7;
    just 6;
  };

main : Maybe Nat := minusThree 1;
