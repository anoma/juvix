-- recursive let
module test034;

import Stdlib.Prelude open;

sum : Nat → Nat :=
  let
    sum' : Nat → Nat
      | zero := zero
      | (suc n) := suc n + sum' n;
  in sum';

mutrec : IO :=
  let
    terminating
    f (x : Nat) : Nat := ite (x < 1) 1 (g (sub x 1) + 2 * x);
    terminating
    g (x : Nat) : Nat := ite (x < 1) 1 (x + h (sub x 1));
    terminating
    h (x : Nat) : Nat := ite (x < 1) 1 (x * f (sub x 1));
  in printNatLn (f 5)
    >>> printNatLn (f 10)
    >>> printNatLn (g 5)
    >>> printNatLn (h 5);

main : IO := printNatLn (sum 10000) >>> mutrec;
