module test078;

import Stdlib.Data.Nat open hiding {fromNat};
import Stdlib.Debug.Trace open;
import Stdlib.Function open using {>->; >>};
import Stdlib.Data.List open;
import Stdlib.Trait.FromNatural open;
import Stdlib.Trait.Functor open;
import Stdlib.System.IO open;

builtin byte
axiom Byte : Type;

builtin byte-from-nat
axiom byteFromNat : Nat -> Byte;

builtin byte-to-nat
axiom toNat : Byte -> Nat;

instance
ByteFromNaturalI : FromNatural Byte :=
  mkFromNatural@{
    fromNat := byteFromNat
  };

n1 : Byte := fromNat 1;

n2 : Byte := fromNat 0xff;

n3 : Byte := fromNat 0x102;

l1 : Byte := 1;

l2 : Byte := 0xee;

l3 : Byte := 0x103;

xs : List Byte := [l1; l2; l3; 2];

printByteLn : Byte -> IO := toNat >> printNatLn;

printListByteLn : List Byte -> IO := map toNat >> Show.show >> printStringLn;

main : IO :=
  printByteLn n1
    >>> printByteLn n2
    >>> printByteLn n3
    >>> printNatLn (toNat l1)
    >>> printNatLn (toNat l2)
    >>> printNatLn (toNat l3)
    >>> printNatLn (toNat 0xf0)
    >>> printListByteLn xs;
