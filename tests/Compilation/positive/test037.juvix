-- Applications with lets and cases in function position
module test037;
  open import Stdlib.Prelude;

  f : List ((Nat → Nat) → Nat → Nat) → Nat;
  f l := (case l
        | x :: _ := x
        | nil := id)
    (let
        y : Nat → Nat;
        y := id;
       in (let
          z : (Nat → Nat) → Nat → Nat;
          z := id;
         in (case l   | _ :: _ := id) z)
      y)
    7;

  main : IO;
  main := printNatLn (f (λ {   | x y := x y + 2 } :: nil));
end;
