-- Pattern matching with indexed types
module test093;

import Stdlib.Prelude open;

type uint (A : Type) (bytes : A) (B : Type) := mk B
with
  instance
  Show-uint {bytes : Nat} : Show (uint Nat bytes Nat) :=
    Show.mk@{
      show : uint Nat bytes Nat -> String
        | (uint.mk val) := Show.show bytes ++str ":" ++str Show.show val;
    };

  main : _ :=
    let
      one : Nat := suc zero;
      e0 : uint zero := uint.mk 3;
      e1 : uint 20 := uint.mk 3;
      e2 : uint (suc 9) := uint.mk 2;
      e3 : uint (suc zero) := uint.mk 1;
      e4 : uint (suc one) := uint.mk 1;
    in printStringLn (Show.show e0)
      >>> printStringLn (Show.show e1)
      >>> printStringLn (Show.show e2)
      >>> printStringLn (Show.show e3)
      >>> printStringLn (Show.show e4);
end;

f (bytes : Nat) (u : uint Nat bytes Nat) : Nat :=
  case u of
    | (uint.mk val) := val;
