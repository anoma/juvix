-- argument specialization
module test056;

import Stdlib.Prelude open;

{-# specialize: [1] #-}
mymap : {A B : Type} -> (A -> B) -> List A -> List B;
mymap f nil := nil;
mymap f (x :: xs) := f x :: mymap f xs;

{-# specialize: [2, 5] #-}
myf : {A B : Type} -> A -> (A -> A -> B) -> A -> B -> Bool -> B;
myf a0 f a b true := f a0 a;
myf a0 f a b false := b;

myf' : {A B : Type} -> A -> (A -> A -> A -> B) -> A -> B -> B;
myf' a0 f a b := myf a0 (f a0) a b true;

sum : List Nat -> Nat;
sum xs := for (acc := 0) (x in xs) {x + acc};

main : Nat;
main :=
  sum (mymap λ{x := x + 3} (1 :: 2 :: 3 :: 4 :: nil)) +
  sum (flatten (mymap (mymap λ{x := x + 2}) ((1 :: nil) :: (2 :: 3 :: nil) :: nil))) +
    myf 3 (*) 2 5 true +
    myf 1 (+) 2 0 false +
    myf' 7 (const (+)) 2 0;
