-- nested binders with variable capture
module test024;

open import Stdlib.Prelude;

type Tree := leaf : Tree | node : Tree → Tree → Tree;

gen : Nat → Tree;
gen zero := leaf;
gen (suc zero) := node leaf leaf;
gen (suc (suc n')) := node (gen n') (gen (suc n'));

g : Tree → Tree;

terminating
f : Tree → Nat;
f leaf := 1;
f (node l' r') :=
  let
    l : Tree := g l';
    r : Tree := g r';
    terminating a : Nat :=
      case l
      | leaf := 1
      | node l r := f l + f r;
    terminating b : Nat :=
      case r
      | node l r := f l + f r
      | _ := 2;
  in
  a * b;

isNode : Tree → Bool;
isNode (node _ _) := true;
isNode leaf := false;

g leaf := leaf;
g (node l r) := if (isNode l) r (node r l);

main : IO;
main := printNatLn (f (gen 10));

end;
