-- Do notation
module test080;

import Stdlib.Data.Nat.Base open;
import Stdlib.Data.Fixity open;
import Stdlib.System.IO open;
import Stdlib.Data.Maybe open;

trait
type Functor (f : Type -> Type) :=
  mkFunctor@{
    map : {A B : Type} -> (A -> B) -> f A -> f B;
  };

open Functor using {mkFunctor} public;

trait
type Applicative (f : Type -> Type) :=
  mkApplicative@{
    {{ApplicativeFunctor}} : Functor f;
    pure : {A : Type} -> A -> f A;
    ap : {A B : Type} -> f (A -> B) -> f A -> f B;
  };

open Applicative using {mkApplicative} public;

trait
type Monad (f : Type -> Type) :=
  mkMonad@{
    {{MonadApplicative}} : Applicative f;

    builtin monad-bind
    bind : {A B : Type} -> f A -> (A -> f B) -> f B;
  };

open Monad using {mkMonad} public;

open Functor;
open Applicative;
open Monad;

syntax operator >>= seq;
>>= {A B} {f : Type -> Type} {{Monad f}} (x : f A) (g : A -> f B) : f B :=
  bind x g;

monadMap {A B} {f : Type -> Type} {{Monad f}} (g : A -> B) (x : f A) : f B :=
  map g x;

instance
maybeFunctor : Functor Maybe :=
  mkFunctor@{
    map {A B} (f : A -> B) : Maybe A -> Maybe B
      | nothing := nothing
      | (just x) := just (f x);
  };

instance
maybeApplicative : Applicative Maybe :=
  mkApplicative@{
    pure := just;
    ap {A B} : Maybe (A -> B) -> Maybe A -> Maybe B
      | (just f) (just x) := just (f x)
      | _ _ := nothing;
  };

instance
maybeMonad : Monad Maybe :=
  mkMonad@{
    bind {A B} : Maybe A -> (A -> Maybe B) -> Maybe B
      | nothing _ := nothing
      | (just a) f := f a;
  };

minusOne : Nat -> Maybe Nat
  | zero := nothing
  | (suc n) := just n;

minusThree (n : Nat) : Maybe Nat :=
  do {
    x1 <- minusOne n;
    x2 <- minusOne x1;
    let
      x2' : Nat := x2;
      num := 3;
      num1 := 4;
    in
    x3 <- minusOne x2';
    pure x3;
  };

main : IO := printLn (minusThree 1) >>> printLn (minusThree 4);
