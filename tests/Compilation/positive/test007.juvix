-- pattern matching and lambda-case
module test007;

import Stdlib.Prelude open;

map' {A B} (f : A → B) : List A → List B :=
  \ {
    | nil := nil
    | (h :: t) := f h :: map' f t
  };

terminating
map'' {A B} (f : A → B) (x : List A) : List B :=
  if (null x) nil (f (head x) :: map'' f (tail x));

lst : List Nat := 0 :: 1 :: nil;

printNatList : List Nat → IO
  | nil := printString "nil"
  | (h :: t) :=
    printNat h >> printString " :: " >> printNatList t;

printNatListLn (lst : List Nat) : IO :=
  printNatList lst >> printString "\n";

main : IO :=
  printBoolLn (null lst)
    >> printBoolLn (null (nil {Nat}))
    >> printNatLn (head lst)
    >> printNatListLn (tail lst)
    >> printNatLn (head (tail lst))
    >> printNatListLn (map ((+) 1) lst)
    >> printNatListLn (map' ((+) 1) lst)
    >> printNatListLn (map'' ((+) 1) lst);
