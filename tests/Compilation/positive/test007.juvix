-- pattern matching and lambda-case
module test007;

import Stdlib.Prelude open;

phead {A} {{Partial}} : List A -> A
  | nil := fail "phead: empty list"
  | (h :: t) := h;

map' {A B} (f : A → B) : List A → List B :=
  \{
    | nil := nil
    | (h :: t) := f h :: map' f t
  };

terminating
map'' {A B} {{Partial}} (f : A → B) (x : List A) : List B :=
  ite (isEmpty x) nil (f (phead x) :: map'' f (tail x));

lst : List Nat := 0 :: 1 :: nil;

printNatList : List Nat → IO
  | nil := printString "nil"
  | (h :: t) := printNat h >>> printString " :: " >>> printNatList t;

printNatListLn (lst : List Nat) : IO := printNatList lst >>> printString "\n";

main : IO :=
  printBoolLn (isEmpty lst)
    >>> printBoolLn (isEmpty (nil {Nat}))
    >>> printNatLn (head 1 lst)
    >>> printNatListLn (tail lst)
    >>> printNatLn (head 0 (tail lst))
    >>> printNatListLn (map ((+) 1) lst)
    >>> printNatListLn (map' ((+) 1) lst)
    >>> printNatListLn (runPartial λ{{{_}} := map'' ((+) 1) lst});
