module test079;

type Nat :=
  | zero
  | suc Nat;

open Nat using {zero; suc} public;

+ : Nat -> Nat -> Nat
  | _ _ := zero;

type Box :=
  mkBox@{
    unbox : Nat;
  };

open Box using {mkBox} public;

type Foldable :=
  mkFoldable@{
    for : {B : Type} -> (B -> Nat -> B) -> B -> Box -> B;
  };

open Foldable using {mkFoldable} public;

one : Nat := zero;

open Foldable public;

foldableBoxNatI : Foldable :=
  mkFoldable@{
    for {B : Type} (f : B -> Nat -> B) (ini : B) : Box -> B
      | (mkBox x) :=
        let
          terminating
          go : Nat -> B
            | zero := ini
            | _ := go x;
        in go x;
  };

main : Nat := for foldableBoxNatI Î»{_ y := y} one (mkBox zero);
