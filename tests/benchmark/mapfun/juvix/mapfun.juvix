-- successively map K functions to a list of N integers
module mapfun;

import Stdlib.Prelude open;
import Stdlib.Data.Nat.Ord open;

mapfun : {A : Type} → List (A → A) → List A → List A
  | nil xs := xs
  | (f :: fs) xs := mapfun fs (map f xs);

genfs : Nat → List (Nat → Nat)
  | zero := nil
  | (suc n) := sub (suc n) :: genfs n;

step : Nat → (Nat → Nat) → Nat → Nat
  | n f x := f (x + n);

genffs : Nat → List ((Nat → Nat) → Nat → Nat)
  | zero := nil
  | (suc n) := step (suc n) :: genffs n;

sum_go : Nat → List Nat → Nat
  | acc nil := acc
  | acc (h :: t) := sum_go (acc + h) t;

sum : List Nat → Nat := sum_go 0;

terminating
gen : Nat → Nat → List Nat
  | k n := if (k == n) (k :: nil) (k :: gen (suc k) n);

main : IO :=
  printNatLn
    (sum
      (mapfun (mapfun (genffs 100) (genfs 100)) (gen 1 10000)));
