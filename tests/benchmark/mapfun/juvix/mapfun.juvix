-- successively map K functions to a list of N integers
module mapfun;
  open import Stdlib.Prelude;
  open import Stdlib.Data.Nat.Ord;

  mapfun : {A : Type} → List (A → A) → List A → List A;
  mapfun nil xs := xs;
  mapfun (f :: fs) xs := mapfun fs (map f xs);

  genfs : Nat → List (Nat → Nat);
  genfs zero := nil;
  genfs (suc n) := sub (suc n) :: genfs n;

  step : Nat → (Nat → Nat) → Nat → Nat;
  step n f x := f (x + n);

  genffs : Nat → List ((Nat → Nat) → Nat → Nat);
  genffs zero := nil;
  genffs (suc n) := step (suc n) :: genffs n;

  sum_go : Nat → List Nat → Nat;
  sum_go acc nil := acc;
  sum_go acc (h :: t) := sum_go (acc + h) t;

  sum : List Nat → Nat;
  sum := sum_go 0;

  terminating
  gen : Nat → Nat → List Nat;
  gen k n := if (k == n) (k :: nil) (k :: gen (suc k) n);

  main : IO;
  main := printNatLn
    (sum
      (mapfun (mapfun (genffs 100) (genfs 100)) (gen 1 10000)));
end;
