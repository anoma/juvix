-- optionally sum N integers from a binary tree K times
module maybe;

import Stdlib.Prelude open;

type Tree :=
  | leaf : Tree
  | node : Nat → Tree → Tree → Tree;

mknode : Nat → Tree → Tree
  | n t := node n t t;

gen : Nat → Tree
  | zero := leaf
  | (suc n) := mknode (suc n) (gen n);

terminating
sum : Nat → Tree → Maybe Nat
  | x leaf := just 0
  | x (node y l r) :=
    ite (x == y) nothing (step1 x y (sum x l) r);

step2 : Nat → Maybe Nat → Maybe Nat
  | x (just y) := just (x + y)
  | _ nothing := nothing;

terminating
step1 : Nat → Nat → Maybe Nat → Tree → Maybe Nat
  | x y (just s1) t := step2 (y + s1) (sum x t)
  | _ _ nothing _ := nothing;

maybeStepRun : Nat → Nat → Maybe Nat
  | x y := just (sub y x);

run : Nat → Tree → Maybe Nat
  | zero t := sum 0 t
  | (suc n) t := stepRun (suc n) t (run n t);

stepRun : Nat → Tree → Maybe Nat → Maybe Nat

  | n t nothing := sum n t
  | n t (just x) := maybe nothing (maybeStepRun x) (sum n t);

printMaybeNat : Maybe Nat → IO
  | (just x) := printNatLn x
  | _ := printStringLn "nothing";

main : IO := printMaybeNat (run 101 (gen 20));
