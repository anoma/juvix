-- Ackermann function (higher-order definition)
module ackermann;

open import Stdlib.Prelude;
open import Data.Int;
open import Data.Int.Ops;

terminating
iter : {A : Type} -> (A -> A) -> Int -> A -> A;
iter f n := if (n Data.Int.Ops.== Int_0) id (f ∘ (iter f (n Data.Int.Ops.- Int_1)));

step : (Int -> Int) -> Int -> Int;
step f n := iter f (n Data.Int.Ops.+ Int_1) Int_1;

ackermann : Int -> Int -> Int;
ackermann m :=
  iter step m ((Data.Int.Ops.+) Int_1);

axiom Int_11 : Int;
compile Int_11 {
  c ↦ "11";
};

axiom Int_3 : Int;
compile Int_3 {
  c ↦ "3";
};

main : IO;
main := printInt (ackermann Int_3 Int_11);

end;
