module Data.Int.Ops;

open import Data.Int;
open import Stdlib.Data.Bool;
open import Stdlib.System.IO;

foreign c {
   bool lessThan(int l, int r) {
     return l < r;
   \}

   bool eqInt(int l, int r) {
     return l == r;
   \}

   int plus(int l, int r) {
     return l + r;
   \}

   int minus(int l, int r) {
     return l - r;
   \}

   int modulo(int l, int r) {
     return l % r;
   \}

   int printInt(int x) {
     putStrLn(intToStr(x));
     return 0;
   \}
};

axiom printInt : Int → IO;
compile printInt {
  c ↦ "printInt";
};

infix 4 <;
axiom < : Int → Int → Bool;
compile < {
  c ↦ "lessThan";
};

axiom eqInt : Int → Int → Bool;
compile eqInt {
  c ↦ "eqInt";
};

infix 4 ==;
axiom == : Int → Int → Bool;
compile == {
  c ↦ "eqInt";
};

infixl 6 -;
axiom - : Int -> Int -> Int;
compile - {
  c ↦ "minus";
};

infixl 6 +;
axiom + : Int -> Int -> Int;
compile + {
  c ↦ "plus";
};

infixl 8 %;
axiom % : Int -> Int -> Int;
compile % {
  c ↦ "modulo";
};

end;
