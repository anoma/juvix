-- Merge sort a list of N integers
module mergesort;
  open import Stdlib.Prelude;
  open import Stdlib.Data.Nat.Ord;

  split_go : {A : Type} → List A → List A → List A → List A
    × List A;
  split_go nil ys zs := ys , zs;
  split_go (x :: xs') ys zs := split_go xs' zs (x :: ys);

  split : {A : Type} → List A → List A × List A;
  split xs := split_go xs nil nil;

  revappend : {A : Type} → List A → List A → List A;
  revappend nil ys := ys;
  revappend (x :: xs) ys := revappend xs (x :: ys);

  merget : List Nat → List Nat → List Nat → List Nat;
  merget nil ys acc := revappend acc ys;
  merget xs nil acc := revappend acc xs;
  merget (x :: xs') (y :: ys') acc := if
    (x <= y)
    (merget xs' (y :: ys') (x :: acc))
    (merget (x :: xs') ys' (y :: acc));

  terminating
  sort' : List Nat × List Nat → List Nat;

  terminating
  sort : List Nat → List Nat;
  sort nil := nil;
  sort (x :: nil) := x :: nil;
  sort xs := sort' (split xs);

  sort' (l1 , l2) := merget (sort l1) (sort l2) nil;

  sorted : List Nat → Bool;
  sorted nil := true;
  sorted (_ :: nil) := true;
  sorted (x :: y :: t) := if (x <= y) (sorted (y :: t)) false;

  gen : Nat → List Nat → List Nat;
  gen zero acc := acc;
  gen (suc n) acc := gen n (suc n :: acc);

  main : IO;
  main := if
    (sorted (sort (gen 2000000 nil)))
    (printStringLn "true")
    (printStringLn "false");
end;
