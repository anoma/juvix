-- Merge sort a list of N integers
module mergesort;

import Stdlib.Prelude open;

split_go
  : {A : Type} → List A → List A → List A → List A × List A
  | nil ys zs := ys, zs
  | (x :: xs') ys zs := split_go xs' zs (x :: ys);

split : {A : Type} → List A → List A × List A
  | xs := split_go xs nil nil;

revappend : {A : Type} → List A → List A → List A
  | nil ys := ys
  | (x :: xs) ys := revappend xs (x :: ys);

merget : List Nat → List Nat → List Nat → List Nat
  | nil ys acc := revappend acc ys
  | xs nil acc := revappend acc xs
  | (x :: xs') (y :: ys') acc :=
    if
      (x <= y)
      (merget xs' (y :: ys') (x :: acc))
      (merget (x :: xs') ys' (y :: acc));

terminating
sort' : List Nat × List Nat → List Nat
  | (l1, l2) := merget (sort l1) (sort l2) nil;

terminating
sort : List Nat → List Nat
  | nil := nil
  | (x :: nil) := x :: nil
  | xs := sort' (split xs);

sorted : List Nat → Bool
  | nil := true
  | (_ :: nil) := true
  | (x :: y :: t) := if (x <= y) (sorted (y :: t)) false;

gen : Nat → List Nat → List Nat
  | zero acc := acc
  | (suc n) acc := gen n (suc n :: acc);

main : IO :=
  if
    (sorted (sort (gen 2000000 nil)))
    (printStringLn "true")
    (printStringLn "false");
