-- applications with lets and cases in function position
module test011;

import Stdlib.Prelude open;

type Pair' :=
  | pair : ((Nat → Nat) → Nat → Nat) → Nat → Pair';

id' : Nat → Nat
  | x := x;

id'' : (Nat → Nat) → Nat → Nat
  | x := x;

id''' : ((Nat → Nat) → Nat → Nat) → (Nat → Nat) → Nat → Nat
  | x := x;

f : Pair' → Nat
  | l :=
    (case l of
        | pair x zero := x
        | _ := id'')
      (let
        y : Nat → Nat := id';
      in (let
          z : (Nat → Nat) → Nat → Nat := id'';
        in (case l of
            | pair _ zero := id'''
            | _ := id''')
          z)
        y)
      7;

main : Nat := f (pair λ {| x y := x y + 2} 0);
