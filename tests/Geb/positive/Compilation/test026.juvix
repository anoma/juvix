-- recursive let
module test026;

import Stdlib.Prelude open;
import Stdlib.Data.Nat.Ord open;

sum : Nat → Nat :=
  let
    sum' : Nat → Nat :=
      λ {
        zero := zero
        | (suc n) := suc n + sum' n
      };
  in sum';

mutrec : Nat :=
  let
    terminating
    f (x : Nat) : Nat := if (x < 1) 1 (g (sub x 1) + 2 * x);
    terminating
    g (x : Nat) : Nat := if (x < 1) 1 (x + h (sub x 1));
    terminating
    h (x : Nat) : Nat := if (x < 1) 1 (x * f (sub x 1));
  in f 5 + f 10 + g 5 + h 5;

main : Nat := sum 100 + mutrec;
