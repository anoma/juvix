-- letrec

def sum : Int -> Int := letrec sum : Int -> Int := \(x : Int) if x = 0 then 0 else x + sum (x - 1) in sum;

def fact : Int -> Int := \(x : Int)
  letrec fact' : Int -> Int -> Int := \(x : Int) \(acc : Int) if x = 0 then acc else fact' (x - 1) (acc * x)
  in fact' x 1;

def fib : Int -> Int :=
  letrec fib' : Int -> Int -> Int -> Int := \(n : Int) \(x : Int) \(y : Int) if n = 0 then x else fib' (n - 1) y (x + y)
  in \(n : Int) fib' n 0 1;

def mutrec : Int :=
  let two : Int := 2 in
  let one : Int := 1 in
  letrec[f g h]
    f : Int -> Int := \(x : Int) {
      if x < one then
        one
      else
        g (x - one) + two * x
    };
    g : Int -> Int := \(x : Int) {
      if x < one then
        one
      else
        x + h (x - one)
    };
    h : Int -> Int := \(x : Int) letrec z : Int := {
      if x < one then
        one
      else
        x * f (x - one)
    } in z;
  in f 5 + f 10 + g 5 + h 5;

letrec x : Int := 3
in
x +
sum 100 +
fact 5 +
fib 10 +
mutrec +
letrec x : Int := 1 in
letrec x' : Int := x + letrec x : Int := 2 in x in
letrec x : Int := x' * x' in
letrec y : Int := x + 2 in
letrec z : Int := x + y in
x + y + z
