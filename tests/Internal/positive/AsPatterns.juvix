module AsPatterns;

import Stdlib.Prelude open;

printListNatLn : List Nat â†’ IO
  | nil := printStringLn "nil"
  | (x :: xs) := printNat x >>> printString " :: " >>> printListNatLn xs;

f1 : List Nat -> List Nat
  | a@(x :: x' :: xs) := a
  | _ := nil;

f2 : List Nat -> List Nat
  | (x :: a@(x' :: xs)) := a
  | _ := nil;

f3 : Nat -> List Nat -> List Nat
  | _ a@(x :: x' :: xs) := a
  | _ _ := nil;

f4 : Nat -> List Nat -> Nat
  | y (x :: a@(x' :: xs)) := y
  | _ _ := zero;

f5 : List Nat -> List Nat -> List Nat
  | (x :: a@(x' :: xs)) (y :: b@(y' :: ys)) := b
  | a b := a;

l1 : List Nat := zero :: suc zero :: nil;

l2 : List Nat :=
  zero :: suc zero :: suc (suc zero) :: suc (suc (suc zero)) :: nil;

main : IO :=
  printListNatLn (f1 l1)
    >>> printListNatLn (f2 l1)
    >>> printListNatLn (f3 zero l1)
    >>> printNatLn (f4 zero l1)
    >>> printListNatLn (f5 l1 l2);
