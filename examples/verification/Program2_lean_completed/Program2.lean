import Juvix.Core.Main
open Juvix.Core.Main

lemma step_0_constant_folding : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.lambda (Expr.lambda (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") (Expr.var 3)) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") (Expr.var 5)) (Expr.app (Expr.var 4) (Expr.var 1))) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 7) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 6)) (Expr.var 5)) (Expr.var 4)) (Expr.var 0))) Expr.fail))))))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) Expr.unit) Expr.unit) (Expr.var 0)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.lambda (Expr.lambda (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") (Expr.var 3)) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") (Expr.var 5)) (Expr.app (Expr.var 4) (Expr.var 1))) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 7) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 6)) (Expr.var 5)) (Expr.var 4)) (Expr.var 0))) Expr.fail))))))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) Expr.unit) Expr.unit) (Expr.var 0)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) := by
  rfl

lemma step_1_inlining : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.lambda (Expr.lambda (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") (Expr.var 3)) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") (Expr.var 5)) (Expr.app (Expr.var 4) (Expr.var 1))) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 7) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 6)) (Expr.var 5)) (Expr.var 4)) (Expr.var 0))) Expr.fail))))))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) Expr.unit) Expr.unit) (Expr.var 0)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.lambda (Expr.lambda (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") (Expr.var 3)) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") (Expr.var 5)) (Expr.app (Expr.var 4) (Expr.var 1))) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 7) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 6)) (Expr.var 5)) (Expr.var 4)) (Expr.var 0))) Expr.fail))))))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) Expr.unit) Expr.unit) (Expr.var 0)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) := by
  rfl

lemma step_2_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.lambda (Expr.lambda (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") (Expr.var 3)) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") (Expr.var 5)) (Expr.app (Expr.var 4) (Expr.var 1))) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 7) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 6)) (Expr.var 5)) (Expr.var 4)) (Expr.var 0))) Expr.fail))))))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) Expr.unit) Expr.unit) (Expr.var 0)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.lambda (Expr.lambda (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") (Expr.var 3)) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") (Expr.var 5)) (Expr.app (Expr.var 4) (Expr.var 1))) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 7) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 6)) (Expr.var 5)) (Expr.var 4)) (Expr.var 0))) Expr.fail))))))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) Expr.unit) Expr.unit) (Expr.var 0)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) := by
  rfl

lemma step_3_specialize_args : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.lambda (Expr.lambda (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") (Expr.var 3)) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") (Expr.var 5)) (Expr.app (Expr.var 4) (Expr.var 1))) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 7) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 6)) (Expr.var 5)) (Expr.var 4)) (Expr.var 0))) Expr.fail))))))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.app (Expr.app (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) Expr.unit) Expr.unit) (Expr.var 0)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.var 5) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) := by
  sorry

lemma step_4_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.var 5) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.var 5) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) := by
  rfl

lemma step_5_constant_folding : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.var 5) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.var 5) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) := by
  rfl

lemma step_6_inlining : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.var 5) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 2) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0)))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  apply Expr.Equiv.fromParam
  intro env₁ env₂ henv
  congr'
  case a =>
    sorry
  case a =>
    sorry
  case a =>
    sorry
  case a =>
    sorry
  case a =>
    sorry
  case a =>
    sorry
  case a =>
    sorry

lemma step_7_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.app (Expr.lambda (Expr.binop BinaryOp.add_int (Expr.var 0) (Expr.const (Constant.int 7)))) (Expr.var 1))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  sorry

lemma step_8_specialize_args : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_9_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_10_constant_folding : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_11_inlining : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_12_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_13_specialize_args : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_14_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_15_constant_folding : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_16_inlining : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_17_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_18_specialize_args : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_19_simplification : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl

lemma step_20_constant_folding : Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) ≈ Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.constr_app (Expr.constr "nil") Expr.unit) (Expr.branch "::" (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.const (Constant.int 7)))) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.recur (Expr.constr_app (Expr.constr "$LetRecTuple$") (Expr.lambda (Expr.save (Expr.var 0) (Expr.branch "nil" (Expr.const (Constant.int 0)) (Expr.branch "::" (Expr.binop BinaryOp.add_int (Expr.var 1) (Expr.app (Expr.save (Expr.var 4) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.var 0))) Expr.fail)))))) (Expr.save (Expr.app (Expr.save (Expr.var 0) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.app (Expr.save (Expr.var 1) (Expr.branch "$LetRecTuple$" (Expr.var 0) Expr.fail)) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 1))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 2))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 3))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 4))) (Expr.constr_app (Expr.constr_app (Expr.constr_app (Expr.constr "::") Expr.unit) (Expr.const (Constant.int 5))) (Expr.constr_app (Expr.constr "nil") Expr.unit)))))))) (Expr.var 0))) := by
  rfl
