module Data.Int.Ops;

open import Data.Int;
open import Stdlib.Data.Bool;

foreign c {
   bool lessThan(int l, int r) {
     return l < r;
   \}

   bool eqInt(int l, int r) {
     return l == r;
   \}

   int plus(int l, int r) {
     return l + r;
   \}

   int minus(int l, int r) {
     return l - r;
   \}
};

infix 4 <';
axiom <' : Int → Int → BackendBool;
compile <' {
  c ↦ "lessThan";
};

infix 4 <;
< : Int → Int → Bool;
< i1 i2 := from-backend-bool (i1 <' i2);

axiom eqInt : Int → Int → BackendBool;
compile eqInt {
  c ↦ "eqInt";
};

infix 4 ==;
== : Int → Int → Bool;
== i1 i2 := from-backend-bool (eqInt i1 i2);

infixl 6 -;
axiom - : Int -> Int -> Int;
compile - {
  c ↦ "minus";
};

infixl 6 +;
axiom + : Int -> Int -> Int;
compile + {
  c ↦ "plus";
};

end;
