--- This example is taken from the Leo workshop:
---
--- https://github.com/AleoHQ/workshop/tree/master/basic_bank
module Bank;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;

import Stdlib.Data.Nat as Nat;

Address : Type := Nat;

bankAddress : Address := 1234;

type Token :=
  --- Arguments are: owner, gates, amount.
  mkToken@{
    owner : Address;
    gates : Nat;
    amount : Nat;
  };

open Token using {mkToken} public;

--- This module defines the type for balances and its associated operations.
module Balances;
  Balances : Type := List (Pair Field Nat);

  --- Increments the amount associated with a certain ;Field;.
  increment (fld : Field) (n : Nat) : (balances : Balances) -> Balances
    | nil := (fld, n) :: nil
    | ((b, bn) :: bs) :=
      if
        | fld == b := (b, bn + n) :: bs
        | else := (b, bn) :: increment fld n bs;

  --- Decrements the amount associated with a certain ;Field;.
  --- If the ;Field; is not found, it does nothing.
  --- Subtraction is truncated to ;zero;.
  decrement (fld : Field) (n : Nat) : (balances : Balances) -> Balances
    | nil := nil
    | ((b, bn) :: bs) :=
      if
        | fld == b := (b, sub bn n) :: bs
        | else := (b, bn) :: decrement fld n bs;

  emtpyBalances : Balances := nil;

  --- Commit balances changes to the chain.
  axiom commitBalances : Balances -> IO;
end;

open Balances;

--- Runs an ;IO; action on the chain.
axiom runOnChain : {B : Type} -> IO -> B -> B;

--- Computes the hash associated with an ;Address;.
axiom hashAddress : Address -> Field;

--- Returns the total amount of tokens after compounding interest.
calculateInterest (principal rate periods : Nat) : Nat :=
  let
    amount : Nat := principal;
    incrAmount (a : Nat) : Nat := div (a * rate) 10000;
  in iterate (min 100 periods) incrAmount amount;

--- Returns a new ;Token;. Arguments are:
---
--- `owner`: The address of the account to issue the token to
---
--- `amount`: The amount of  tokens to issue
---
--- `caller`: Who is creating the transaction. It must be the bank.
issue (caller owner : Address) (amount : Nat) : Token :=
  assert (caller == bankAddress) >-> mkToken owner 0 amount;

--- Deposits some amount of money into the bank.
deposit (bal : Balances) (token : Token) (amount : Nat) : Token :=
  let
    difference : Nat := sub (Token.amount token) amount;
    remaining : Token :=
      mkToken (Token.owner token) (Token.gates token) difference;
    hash : Field := hashAddress (Token.owner token);
    bal' : Balances := increment hash amount bal;
  in runOnChain (commitBalances bal') remaining;

--- Returns a new ;Token; containing the amount of money withdrawn.
withdraw
  (bal : Balances)
  (caller : Address)
  (recipient : Address)
  (amount : Nat)
  (rate : Nat)
  (periods : Nat)
  : Token :=
  assert (caller == bankAddress)
    >-> let
          hash : Field := hashAddress recipient;
          total : Nat := calculateInterest amount rate periods;
          token : Token := mkToken recipient 0 total;
          bal' : Balances := decrement hash amount bal;
        in runOnChain (commitBalances bal') token;
