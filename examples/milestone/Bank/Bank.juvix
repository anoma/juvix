--- This example is taken from the Leo workshop:
---
--- https://github.com/AleoHQ/workshop/tree/master/basic_bank
module Bank;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;

import Stdlib.Data.Nat as Nat;

Address : Type := Nat;

bankAddress : Address := 1234;

module Token;
  type Token :=
    --- Arguments are: owner, gates, amount.
    mkToken : Address -> Nat -> Nat -> Token;

  --- Retrieves the owner from a ;Token;
  getOwner : Token -> Address
    | (mkToken o _ _) := o;

  --- Retrieves the amount from a ;Token;
  getAmount : Token -> Nat
    | (mkToken _ _ a) := a;

  --- Retrieves the gates from a ;Token;
  getGates : Token -> Nat
    | (mkToken _ g _) := g;
end;

open Token;

--- This module defines the type for balances and its associated operations.
module Balances;
  Balances : Type := List (Pair Field Nat);

  --- Increments the amount associated with a certain ;Field;.
  increment : Field -> Nat -> Balances -> Balances
    | f n nil := (f, n) :: nil
    | f n ((b, bn) :: bs) := ite (f == b) ((b, bn + n) :: bs) ((b, bn) :: increment f n bs);

  --- Decrements the amount associated with a certain ;Field;.
  --- If the ;Field; is not found, it does nothing.
  --- Subtraction is truncated to ;zero;.
  decrement : Field -> Nat -> Balances -> Balances
    | _ _ nil := nil
    | f n ((b, bn) :: bs) := ite (f == b) ((b, sub bn n) :: bs) ((b, bn) :: decrement f n bs);

  emtpyBalances : Balances := nil;

  --- Commit balances changes to the chain.
  axiom commitBalances : Balances -> IO;
end;

open Balances;

--- Runs an ;IO; action on the chain.
axiom runOnChain : {B : Type} -> IO -> B -> B;

--- Computes the hash associated with an ;Address;.
axiom hashAddress : Address -> Field;

--- Returns the total amount of tokens after compounding interest.
calculateInterest : Nat -> Nat -> Nat -> Nat
  | principal rate periods :=
    let
      amount : Nat := principal;
      incrAmount (a : Nat) : Nat := div (a * rate) 10000;
    in iterate (min 100 periods) incrAmount amount;

--- Asserts some ;Bool; condition.
assert : {A : Type} -> Bool -> A -> A
  | c a := ite c a (failwith "assertion failed");

--- Returns a new ;Token;. Arguments are:
---
--- `owner`: The address of the account to issue the token to
---
--- `amount`: The amount of  tokens to issue
---
--- `caller`: Who is creating the transaction. It must be the bank.
issue : Address -> Address -> Nat -> Token
  | caller owner amount := assert (caller == bankAddress) (mkToken owner 0 amount);

--- Deposits some amount of money into the bank.
deposit (bal : Balances) (token : Token) (amount : Nat) : Token :=
  let
    difference : Nat := sub (getAmount token) amount;
    remaining : Token := mkToken (getOwner token) (getGates token) difference;
    hash : Field := hashAddress (getOwner token);
    bal' : Balances := increment hash amount bal;
  in runOnChain (commitBalances bal') remaining;

--- Returns a new ;Token; containing the amount of money withdrawn.
withdraw
  (bal : Balances)
  (caller : Address)
  (recipient : Address)
  (amount : Nat)
  (rate : Nat)
  (periods : Nat)
  : Token :=
  assert
    (caller == bankAddress)
    (let
      hash : Field := hashAddress recipient;
      total : Nat := calculateInterest amount rate periods;
      token : Token := mkToken recipient 0 total;
      bal' : Balances := decrement hash amount bal;
    in runOnChain (commitBalances bal') token);
