--- This file implements the mid-square hashing function in Juvix. See:
--- https://research.cs.vt.edu/AVresearch/hashing/midsquare.php
--- The implementation is for hashing natural numbers with maximum 16 bits into 6
--- bits.
module MidSquareHash;

import Stdlib.Prelude open;

--- `pow n` is 2 ^ n
pow : (n : Nat) -> Nat
  | zero := 1
  | (suc n) := 2 * pow n;

--- `hash' n x` hashes a number x with max n bits (i.e. smaller than 2^n) into 6 bits
--- (i.e. smaller than 64) using the mid-square algorithm.
hash' : (n : Nat) -> (x : Nat) -> Nat
  | (suc n'@(suc (suc m))) x :=
    if
      | x < pow n' := hash' n' x
      | else := mod (div (x * x) (pow m)) (pow 6)
  | _ x := x * x;

hash : Nat -> Nat := hash' 16;

main : Nat -> Nat := hash;
-- result: 3 for 1367
