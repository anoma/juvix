module Demo;

-- standard library prelude
import Stdlib.Prelude open;

even : (n : Nat) -> Bool
  | zero := true
  | (suc zero) := false
  | (suc (suc n)) := even n;

even' (n : Nat) : Bool := mod n 2 == 0;

--- Returns base 2 logarithm of `n` rounded down
terminating
log2 (n : Nat) : Nat :=
  if
    | n <= 1 := 0
    | else := log2 (div n 2) + 1;

type Tree (A : Type) :=
  | leaf@{
      element : A;
    }
  | node@{
      element : A;
      left : Tree A;
      right : Tree A;
    };

open Tree using {leaf; node} public;

mirror {A} : (tree : Tree A) -> Tree A
  | tree@(leaf _) := tree
  | (node x l r) := node x (mirror r) (mirror l);

tree : Tree Nat := node 2 (node 3 (leaf 0) (leaf 1)) (leaf 7);

preorder : {A : Type} -> Tree A -> List A
  | (leaf x) := x :: nil
  | (node x l r) := x :: nil ++ preorder l ++ preorder r;

terminating
sort {A} {{Ord A}} (list : List A) : List A :=
  case list of
    | nil := nil
    | xs@(_ :: nil) := xs
    | xs := uncurry merge (both sort (splitAt (div (length xs) 2) xs));

printNatListLn : (list : List Nat) -> IO
  | nil := printStringLn "nil"
  | (x :: xs) := printNat x >>> printString " :: " >>> printNatListLn xs;

main : IO :=
  printStringLn "Hello!"
    >>> printNatListLn (preorder (mirror tree))
    >>> printNatListLn (sort (preorder (mirror tree)))
    >>> printNatLn (log2 3)
    >>> printNatLn (log2 130);
