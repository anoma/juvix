* Juvix Doctor

The =juvix doctor= command can help you to troubleshoot problems with your development environment. For each problem the doctor finds they'll be a link to a section on this page to help you fix it.

** Could not find the clang command

The Juvix compiler uses the [[https://clang.llvm.org][Clang compiler]] version 13 or later to generate binaries. You need to have Clang available on your system =$PATH=.

Recommended installation method:

*** MacOS

Use [[https://brew.sh][Homebrew]]:

#+begin_src shell
brew install llvm
#+end_src

NB: The distribution of Clang that comes with XCode does not support the =Wasm= target so you must install the standard Clang distribution.

*** Debian / Ubuntu Linux

#+begin_src shell
sudo apt install clang lldb lld
#+end_src

*** Arch Linux

#+begin_src shell
sudo pacman -S llvm lld
#+end_src

** Could not find the wasm-ld command

The Juvix compiler required =wasm-ld= (the Wasm linker) to produce =Wasm= binaries.

Recommened installation method:

*** MacOS

=wasm-ld= is included in the [[https://brew.sh][Homebrew]] llvm distribution:

#+begin_src shell
brew install llvm
#+end_src

*** Debian / Ubuntu Linux

#+begin_src shell
sudo apt install lldb lld
#+end_src

*** Arch Linux

#+begin_src shell
sudo pacman -S lld
#+end_src

** Newer Clang version required

Juvix requires Clang version 13 or above. See the documentation on [[./doctor.md#could-not-find-the-clang-command][installing Clang]].

** Clang does not support the wasm32 target

Juvix requires Clang version 13 or above. See the documentation on [[./doctor.md#could-not-find-the-clang-command][installing Clang]].

** Clang does not support the wasm32-wasi target

Juvix uses [[https://wasi.dev][WASI - The Wasm System Interface]] to produce binaries that can be executed using a Wasm runtime. The files necessary to setup Clang with =wasm32-wasi= support are available at [[https://github.com/WebAssembly/wasi-sdk/releases][wasi-sdk]].

*** Install WASI-SDK
1. Download a release of [[https://github.com/WebAssembly/wasi-sdk/releases][wasi-sdk]] for your system, choose either =wasi-sdk-16.0-linux.tar.gz= or =wasi-sdk-16.0-macos.tar.gz=.
2. Untar the release file and add the location of the embedded =wasi-sdk-16.0/bin= directory to your system =PATH=.
3. Run =which clang= and check that the result is located in the =wasi-sdk-16.0/bin= directory.

On Linux:

#+begin_src shell
cd ~
mkdir .wasi-sdk
cd .wasi-sdk
curl https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-linux.tar.gz -OL
tar xf wasi-sdk-16.0-linux.tar.gz --strip-components=1
export PATH=$HOME/.wasi-sdk/bin:$PATH
#+end_src

On macOS:

#+begin_src shell
cd ~
mkdir .wasi-sdk
cd .wasi-sdk
curl https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-macos.tar.gz -OL
tar xf wasi-sdk-16.0-macos.tar.gz --strip-components=1
export PATH=$HOME/.wasi-sdk/bin:$PATH
#+end_src

**  Could not find the wasmer command

The Juvix test suite uses [[https://wasmer.io][Wasmer]] as a Wasm runtime to execute compiled Wasm binaries. See [[https://docs.wasmer.io/ecosystem/wasmer/getting-started][the Wasmer documentation]] to see how to install it.
