* Termination

To not bring inconsistencies by function declarations, Juvix
requires that every function pass the termination checker.
This check is called before the typechecking in the compilation pipeline.

Since the former requirement is vital but often tricky to fulfill for programs
in a total language like Juvix, it is convenient to have
a way to bypass the termination checking. The user may know their programs are terminating even when our termination checker algorithm can not see it. The termination checker is limited as it only accepts a subset of recursion functions. Our termination checker algorithm slightly modifies the algorithm for checking the termination of the Foetus's language.

To skip the termination checker, we introduced the =terminating= keyword to annotate a type signature as terminating. The syntax is the following.

#+begin_example
terminating fun : A â†’ B;
#+end_example

Annotating a function as =terminating= means that /all/ its function clauses pass the termination
checker's criterion. To skip the termination checker for mutual recursive functions, all the functions
involved must be annotated as =terminating=, otherwise, the checker will complain.
