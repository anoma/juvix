* Compile blocks

The compile keyword has two arguments:

- A name of an expression to be compiled.
- A set of compilation rules using the format (=backend= -> =string=)
  where the string is the text we inline.

This is an example:

#+begin_src haskell
$ cat tests/positive/HelloWorld
...
axiom Action : Type;
compile Action {
  c -> "int";
};
...
#+end_src

The following Juvix examples are NOT valid.

- One can not repeat backend inside a =compile= block.

#+begin_src haskell
...
axiom Action : Type;
compile Action {
 c -> "int";
 c -> "int";  --
};
...
#+end_src

- One name, one compile block, no more.

#+begin_src haskell
...
axiom Action : Type;
compile Action {
 c -> "int";
};
compile Action {
 c -> "int";
};
...
#+end_src

- A compile block must be in the same module as their name definition.

#+begin_src haskell
$ cat A.juvix
...
axiom Action : Type;
...
#+end_src

#+begin_src haskell
$ cat B.juvix
...
compile Action {
 c -> "int";
};
...
#+end_src
